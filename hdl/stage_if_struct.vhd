-- VHDL Entity ece411.Stage_IF.symbol
--
-- Created:
--          by - li151.ews (gelib-057-21.ews.illinois.edu)
--          at - 19:53:43 12/06/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;
USE ieee.std_logic_arith.all;

ENTITY Stage_IF IS
   PORT( 
      IF_ADJ9       : IN     LC3b_word;
      IF_BRAddout   : IN     LC3b_word;
      IF_MDRout     : IN     LC3b_word;
      IF_N          : IN     std_logic;
      IF_Opcodein   : IN     LC3b_Opcode;
      IF_P          : IN     std_logic;
      IF_Z          : IN     std_logic;
      I_DATAIN      : IN     LC3b_word;
      I_MRESP_H     : IN     std_logic;
      Load          : IN     std_logic;
      MEM_OPCODE    : IN     LC3b_OPCODE;
      PCMuxSel      : IN     LC3b_4mux_sel;
      PCMuxSel_Wr   : IN     LC3b_4MUX_SEL;
      RESET_L       : IN     std_logic;
      RFADD         : IN     LC3b_word;
      Stall         : IN     std_logic;
      TakeBR        : IN     std_logic;
      clk           : IN     std_logic;
      predictedBr   : IN     LC3b_word;
      IF_IR11       : OUT    std_logic;
      IF_IR4        : OUT    std_logic;
      IF_IR5        : OUT    std_logic;
      IF_IRout      : OUT    LC3b_word;
      IF_PCPlus2out : OUT    LC3b_word;
      IF_PCout      : OUT    LC3b_word;
      IF_opcode     : OUT    LC3b_opcode;
      UCBrSel       : OUT    std_logic
   );

-- Declarations

END Stage_IF ;

--
-- VHDL Architecture ece411.Stage_IF.struct
--
-- Created:
--          by - li151.ews (gelib-057-21.ews.illinois.edu)
--          at - 19:53:44 12/06/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY mp3lib;

ARCHITECTURE struct OF Stage_IF IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL BROpcode     : std_logic;
   SIGNAL BrMuxSel     : STD_LOGIC;
   SIGNAL F            : STD_LOGIC;
   SIGNAL F1           : LC3B_WORD;
   SIGNAL F2           : LC3b_word;
   SIGNAL F3           : STD_LOGIC;
   SIGNAL F4           : LC3B_WORD;
   SIGNAL IF_IRout2    : LC3b_word;
   SIGNAL IsBR         : STD_LOGIC;
   SIGNAL LoadPC       : std_logic;
   SIGNAL PCMuxSel_out : LC3b_4mux_sel;
   SIGNAL PCMuxout     : LC3b_word;
   SIGNAL ZEROS        : LC3B_WORD;

   -- Implicit buffer signal declarations
   SIGNAL IF_IRout_internal      : LC3b_word;
   SIGNAL IF_PCPlus2out_internal : LC3b_word;
   SIGNAL IF_PCout_internal      : LC3b_word;


   -- Component Declarations
   COMPONENT COMP4
   PORT (
      A        : IN     LC3b_opcode;
      BROpcode : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT Plus2
   PORT (
      PCout      : IN     LC3b_word;
      clk        : IN     std_logic;
      PCPlus2out : OUT    LC3b_word
   );
   END COMPONENT;
   COMPONENT Reg16
   PORT (
      Input  : IN     LC3b_word ;
      RESET  : IN     std_logic ;
      clk    : IN     std_logic ;
      load   : IN     std_logic ;
      Output : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT Splitter_IR
   PORT (
      IR_IN     : IN     LC3b_word;
      IF_IR11   : OUT    std_logic;
      IF_IR4    : OUT    std_logic;
      IF_IR5    : OUT    std_logic;
      IF_opcode : OUT    LC3b_opcode
   );
   END COMPONENT;
   COMPONENT WordMux2
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      Sel : IN     std_logic ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT WordMux4
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      C   : IN     LC3b_word ;
      D   : IN     LC3b_word ;
      Sel : IN     LC3b_4mux_sel ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ZERO
   PORT (
      ZEROS : OUT    LC3B_WORD
   );
   END COMPONENT;
   COMPONENT orUCBR
   PORT (
      clk         : IN     std_logic ;
      BrMuxSel    : IN     STD_LOGIC ;
      IF_Opcodein : IN     LC3b_Opcode ;
      UCBrSel     : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT u2bitmux
   PORT (
      BrMuxSel     : IN     STD_LOGIC;
      IsBR         : IN     STD_LOGIC;
      MEM_OPCODE   : IN     LC3b_OPCODE;
      PCMuxSel     : IN     LC3b_4mux_sel;
      PCMuxSel_Wr  : IN     LC3b_4MUX_SEL;
      TakeBR       : IN     std_logic;
      clk          : IN     std_logic;
      PCMuxSel_out : OUT    LC3b_4mux_sel
   );
   END COMPONENT;
   COMPONENT ADD16
   PORT (
      A : IN     LC3B_WORD ;
      B : IN     LC3B_WORD ;
      F : OUT    LC3B_WORD 
   );
   END COMPONENT;
   COMPONENT AND2
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT AND3
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      C : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT MUX2_16
   PORT (
      A   : IN     LC3B_WORD ;
      B   : IN     LC3B_WORD ;
      SEL : IN     STD_LOGIC ;
      F   : OUT    LC3B_WORD 
   );
   END COMPONENT;
   COMPONENT NOT1
   PORT (
      A : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT OR3
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      C : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : ADD16 USE ENTITY mp3lib.ADD16;
   FOR ALL : AND2 USE ENTITY mp3lib.AND2;
   FOR ALL : AND3 USE ENTITY mp3lib.AND3;
   FOR ALL : COMP4 USE ENTITY ece411.COMP4;
   FOR ALL : MUX2_16 USE ENTITY mp3lib.MUX2_16;
   FOR ALL : NOT1 USE ENTITY mp3lib.NOT1;
   FOR ALL : OR3 USE ENTITY mp3lib.OR3;
   FOR ALL : Plus2 USE ENTITY ece411.Plus2;
   FOR ALL : Reg16 USE ENTITY ece411.Reg16;
   FOR ALL : Splitter_IR USE ENTITY ece411.Splitter_IR;
   FOR ALL : WordMux2 USE ENTITY ece411.WordMux2;
   FOR ALL : WordMux4 USE ENTITY ece411.WordMux4;
   FOR ALL : ZERO USE ENTITY ece411.ZERO;
   FOR ALL : orUCBR USE ENTITY ece411.orUCBR;
   FOR ALL : u2bitmux USE ENTITY ece411.u2bitmux;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   U_7 : COMP4
      PORT MAP (
         A        => IF_Opcodein,
         BROpcode => BROpcode
      );
   aPlus2 : Plus2
      PORT MAP (
         PCout      => IF_PCout_internal,
         clk        => clk,
         PCPlus2out => IF_PCPlus2out_internal
      );
   IR : Reg16
      PORT MAP (
         Input  => I_DATAIN,
         RESET  => RESET_L,
         clk    => clk,
         load   => I_MRESP_H,
         Output => IF_IRout2
      );
   PC : Reg16
      PORT MAP (
         Input  => PCMuxout,
         RESET  => RESET_L,
         clk    => clk,
         load   => LoadPC,
         Output => IF_PCout_internal
      );
   aSplitter_IR : Splitter_IR
      PORT MAP (
         IR_IN     => IF_IRout_internal,
         IF_IR4    => IF_IR4,
         IF_IR5    => IF_IR5,
         IF_IR11   => IF_IR11,
         IF_opcode => IF_opcode
      );
   U_10 : WordMux2
      PORT MAP (
         A   => F4,
         B   => predictedBr,
         Sel => TakeBR,
         F   => F2
      );
   PCMux : WordMux4
      PORT MAP (
         A   => IF_PCPlus2out_internal,
         B   => F2,
         C   => IF_MDRout,
         D   => RFADD,
         Sel => PCMuxSel_out,
         F   => PCMuxout
      );
   U_1 : ZERO
      PORT MAP (
         ZEROS => ZEROS
      );
   aorUCBR : orUCBR
      PORT MAP (
         clk         => clk,
         BrMuxSel    => BrMuxSel,
         IF_Opcodein => IF_Opcodein,
         UCBrSel     => UCBrSel
      );
   a2bitmux : u2bitmux
      PORT MAP (
         PCMuxSel_Wr  => PCMuxSel_Wr,
         clk          => clk,
         PCMuxSel_out => PCMuxSel_out,
         PCMuxSel     => PCMuxSel,
         MEM_OPCODE   => MEM_OPCODE,
         BrMuxSel     => BrMuxSel,
         IsBR         => IsBR,
         TakeBR       => TakeBR
      );
   U_4 : ADD16
      PORT MAP (
         A => IF_PCout_internal,
         B => IF_ADJ9,
         F => F1
      );
   U_2 : AND2
      PORT MAP (
         A => Load,
         B => F,
         F => LoadPC
      );
   U_9 : AND2
      PORT MAP (
         A => BROpcode,
         B => F3,
         F => IsBR
      );
   U_5 : AND3
      PORT MAP (
         A => IF_N,
         B => IF_Z,
         C => IF_P,
         F => BrMuxSel
      );
   U_0 : MUX2_16
      PORT MAP (
         A   => I_DATAIN,
         B   => ZEROS,
         SEL => Stall,
         F   => IF_IRout_internal
      );
   U_6 : MUX2_16
      PORT MAP (
         A   => IF_BRAddout,
         B   => F1,
         SEL => BrMuxSel,
         F   => F4
      );
   U_3 : NOT1
      PORT MAP (
         A => Stall,
         F => F
      );
   U_8 : OR3
      PORT MAP (
         A => IF_N,
         B => IF_Z,
         C => IF_P,
         F => F3
      );

   -- Implicit buffered output assignments
   IF_IRout      <= IF_IRout_internal;
   IF_PCPlus2out <= IF_PCPlus2out_internal;
   IF_PCout      <= IF_PCout_internal;

END struct;
