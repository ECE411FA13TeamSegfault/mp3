-- VHDL Entity ece411.Stage_IF.interface
--
-- Created:
--          by - schen79.ews (linux-a1.ews.illinois.edu)
--          at - 21:40:15 10/19/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Stage_IF IS
   PORT( 
      IF_BRAddout   : IN     LC3b_word;
      IF_MDRout     : IN     LC3b_word;
      LoadIR        : IN     std_logic;
      LoadPC        : IN     std_logic;
      PCMuxSel      : IN     LC3b_4mux_sel;
      RESET_L       : IN     std_logic;
      clk           : IN     std_logic;
      IF_ADJ11out   : OUT    LC3b_word;
      IF_ADJ6out    : OUT    LC3b_word;
      IF_ADJ9out    : OUT    LC3b_word;
      IF_IMM5out    : OUT    LC3b_word;
      IF_IR11       : OUT    std_logic;
      IF_IR5        : OUT    std_logic;
      IF_Opcode     : OUT    LC3b_opcode;
      IF_PCPlus2out : OUT    LC3b_word;
      IF_PCout      : OUT    LC3b_word;
      IF_SEXT6out   : OUT    LC3b_word;
      IF_SrcA       : OUT    LC3b_reg;
      IF_SrcB       : OUT    LC3b_reg;
      IF_TRAPVECT8  : OUT    LC3b_word;
      IF_dest       : OUT    LC3b_reg;
      IF_shftop     : OUT    LC3b_shftop
   );

-- Declarations

END Stage_IF ;

--
-- VHDL Architecture ece411.Stage_IF.struct
--
-- Created:
--          by - schen79.ews (linux-a1.ews.illinois.edu)
--          at - 21:40:15 10/19/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;


ARCHITECTURE struct OF Stage_IF IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL D         : LC3b_word;
   SIGNAL IMM5      : LC3B_IMM5;
   SIGNAL INDEX6    : LC3B_INDEX6;
   SIGNAL MDRout    : LC3b_word;
   SIGNAL OFFSET11  : LC3B_OFFSET11;
   SIGNAL OFFSET9   : LC3B_OFFSET9;
   SIGNAL PCMuxout  : LC3b_word;
   SIGNAL TRAPVECT8 : LC3B_TRAPVECT8;

   -- Implicit buffer signal declarations
   SIGNAL IF_PCPlus2out_internal : LC3b_word;
   SIGNAL IF_PCout_internal      : LC3b_word;


   -- Component Declarations
   COMPONENT ADJ11
   PORT (
      clk      : IN     std_logic;
      offset11 : IN     LC3b_offset11;
      ADJ11out : OUT    LC3b_word
   );
   END COMPONENT;
   COMPONENT ADJ6
   PORT (
      clk     : IN     std_logic;
      index6  : IN     LC3b_index6;
      ADJ6out : OUT    LC3b_word
   );
   END COMPONENT;
   COMPONENT ADJ8
   PORT (
      clk       : IN     std_logic;
      trapvect8 : IN     LC3b_trapvect8;
      ADJ8out   : OUT    LC3b_word
   );
   END COMPONENT;
   COMPONENT ADJ9
   PORT (
      clk     : IN     std_logic;
      offset9 : IN     LC3b_offset9;
      ADJ9out : OUT    LC3b_word
   );
   END COMPONENT;
   COMPONENT IR
   PORT (
      LoadIR    : IN     std_logic ;
      MDRout    : IN     LC3b_word ;
      clk       : IN     std_logic ;
      IMM5      : OUT    LC3B_IMM5 ;
      INDEX6    : OUT    LC3B_INDEX6 ;
      TRAPVECT8 : OUT    LC3B_TRAPVECT8 ;
      OFFSET9   : OUT    LC3B_OFFSET9 ;
      OFFSET11  : OUT    LC3B_OFFSET11 ;
      IF_Opcode : OUT    LC3b_opcode ;
      IF_SrcA   : OUT    LC3b_reg ;
      IF_SrcB   : OUT    LC3b_reg ;
      IF_dest   : OUT    LC3b_reg ;
      IF_shftop : OUT    LC3b_shftop ;
      IF_IR5    : OUT    std_logic ;
      IF_IR11   : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Plus2
   PORT (
      PCout      : IN     LC3b_word;
      clk        : IN     std_logic;
      PCPlus2out : OUT    LC3b_word
   );
   END COMPONENT;
   COMPONENT Reg16
   PORT (
      Input  : IN     LC3b_word ;
      RESET  : IN     std_logic ;
      clk    : IN     std_logic ;
      load   : IN     std_logic ;
      Output : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT SEXT5
   PORT (
      Imm5    : IN     LC3b_imm5 ;
      clk     : IN     std_logic ;
      Imm5out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT SEXT6
   PORT (
      clk      : IN     std_logic;
      index6   : IN     LC3b_index6;
      SEXT6out : OUT    LC3b_word
   );
   END COMPONENT;
   COMPONENT WordMux4
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      C   : IN     LC3b_word ;
      D   : IN     LC3b_word ;
      Sel : IN     LC3b_4mux_sel ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : ADJ11 USE ENTITY ece411.ADJ11;
   FOR ALL : ADJ6 USE ENTITY ece411.ADJ6;
   FOR ALL : ADJ8 USE ENTITY ece411.ADJ8;
   FOR ALL : ADJ9 USE ENTITY ece411.ADJ9;
   FOR ALL : IR USE ENTITY ece411.IR;
   FOR ALL : Plus2 USE ENTITY ece411.Plus2;
   FOR ALL : Reg16 USE ENTITY ece411.Reg16;
   FOR ALL : SEXT5 USE ENTITY ece411.SEXT5;
   FOR ALL : SEXT6 USE ENTITY ece411.SEXT6;
   FOR ALL : WordMux4 USE ENTITY ece411.WordMux4;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   aADJ11 : ADJ11
      PORT MAP (
         clk      => clk,
         offset11 => OFFSET11,
         ADJ11out => IF_ADJ11out
      );
   aADJ6 : ADJ6
      PORT MAP (
         clk     => clk,
         index6  => INDEX6,
         ADJ6out => IF_ADJ6out
      );
   aADJ8 : ADJ8
      PORT MAP (
         clk       => clk,
         trapvect8 => TRAPVECT8,
         ADJ8out   => IF_TRAPVECT8
      );
   aADJ9 : ADJ9
      PORT MAP (
         clk     => clk,
         offset9 => OFFSET9,
         ADJ9out => IF_ADJ9out
      );
   aIR : IR
      PORT MAP (
         LoadIR    => LoadIR,
         MDRout    => MDRout,
         clk       => clk,
         IMM5      => IMM5,
         INDEX6    => INDEX6,
         TRAPVECT8 => TRAPVECT8,
         OFFSET9   => OFFSET9,
         OFFSET11  => OFFSET11,
         IF_Opcode => IF_Opcode,
         IF_SrcA   => IF_SrcA,
         IF_SrcB   => IF_SrcB,
         IF_dest   => IF_dest,
         IF_shftop => IF_shftop,
         IF_IR5    => IF_IR5,
         IF_IR11   => IF_IR11
      );
   aPlus2 : Plus2
      PORT MAP (
         PCout      => IF_PCout_internal,
         clk        => clk,
         PCPlus2out => IF_PCPlus2out_internal
      );
   PC : Reg16
      PORT MAP (
         Input  => PCMuxout,
         RESET  => RESET_L,
         clk    => clk,
         load   => LoadPC,
         Output => IF_PCout_internal
      );
   aSEXT5 : SEXT5
      PORT MAP (
         Imm5    => IMM5,
         clk     => clk,
         Imm5out => IF_IMM5out
      );
   aSEXT6 : SEXT6
      PORT MAP (
         index6   => INDEX6,
         clk      => clk,
         SEXT6out => IF_SEXT6out
      );
   PCMux : WordMux4
      PORT MAP (
         A   => IF_PCPlus2out_internal,
         B   => IF_BRAddout,
         C   => IF_MDRout,
         D   => D,
         Sel => PCMuxSel,
         F   => PCMuxout
      );

   -- Implicit buffered output assignments
   IF_PCPlus2out <= IF_PCPlus2out_internal;
   IF_PCout      <= IF_PCout_internal;

END struct;
