-- VHDL Entity ece411.Control.interface
--
-- Created:
--          by - chng2.ews (linux-a2.ews.illinois.edu)
--          at - 11:41:49 09/13/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Control IS
   PORT( 
      ADDRESS_0     : IN     std_logic;
      CheckN        : IN     std_logic;
      CheckP        : IN     std_logic;
      CheckZ        : IN     std_logic;
      MRESP_H       : IN     std_logic;
      Opcode        : IN     LC3b_opcode;
      RESET_L       : IN     std_logic;
      START_H       : IN     std_logic;
      bit11         : IN     std_logic;
      clk           : IN     std_logic;
      n             : IN     std_logic;
      p             : IN     std_logic;
      shftop        : IN     LC3b_shftop;
      z             : IN     std_logic;
      ADDR2MuxSel   : OUT    std_logic;
      ALUMuxSel     : OUT    std_logic;
      ALUop         : OUT    LC3b_aluop;
      DRMuxSel      : OUT    std_logic;
      GenCCMuxSel   : OUT    std_logic;
      LoadIR        : OUT    std_logic;
      LoadMAR       : OUT    std_logic;
      LoadMDR       : OUT    std_logic;
      LoadNZP       : OUT    std_logic;
      LoadPC        : OUT    std_logic;
      MARMuxSel     : OUT    LC3b_4Mux_Sel;
      MDRMux2Sel    : OUT    LC3b_4mux_sel;
      MDRMuxSel     : OUT    std_logic;
      MREAD_L       : OUT    std_logic;
      MWRITEH_L     : OUT    std_logic;
      MWRITEL_L     : OUT    std_logic;
      PCMuxSel      : OUT    LC3b_4Mux_Sel;
      RFMux2Sel     : OUT    LC3b_4mux_sel;
      RFMuxSel      : OUT    LC3b_4Mux_Sel;
      RegWrite      : OUT    std_logic;
      StoreSR       : OUT    std_logic;
      offset6MuxSel : OUT    std_logic
   );

-- Declarations

END Control ;

--
-- VHDL Architecture ece411.Control.fsm
--
-- Created:
--          by - chng2.ews (linux-a2.ews.illinois.edu)
--          at - 11:41:50 09/13/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;
 
ARCHITECTURE fsm OF Control IS

   TYPE STATE_TYPE IS (
      Reset,
      Decode,
      ADD,
      BR1,
      BR2,
      L_AND,
      L_NOT,
      IF1,
      IF2,
      IF3,
      CalcADDR,
      ST1,
      LD1,
      ST2,
      LD2,
      JMPRET,
      LEA,
      ALUSRL,
      ALUSLL,
      ALUSRA,
      CalcADDRB,
      LDB1,
      LDB2,
      STB1,
      STB4,
      LDB3,
      STB5,
      STB3,
      STB2,
      CalcADDRI,
      STI1,
      LDI1,
      STI2,
      LDI2,
      LDI3,
      LDI4,
      STI3,
      STI4,
      JSRSavePC,
      JSR1,
      JSRR1,
      TrapSavePC,
      TrapCalcAddr,
      s0,
      Trap1,
      Trap2
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      RESET_L
   )
   -----------------------------------------------------------------
   BEGIN
      IF (RESET_L = '0') THEN
         current_state <= Reset;
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      ADDRESS_0,
      CheckN,
      CheckP,
      CheckZ,
      MRESP_H,
      Opcode,
      START_H,
      bit11,
      current_state,
      n,
      p,
      shftop,
      z
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN Reset => 
            IF (START_H = '1') THEN 
               next_state <= IF1;
            ELSE
               next_state <= Reset;
            END IF;
         WHEN Decode => 
            IF (Opcode = op_add) THEN 
               next_state <= ADD;
            ELSIF (Opcode = op_and) THEN 
               next_state <= L_AND;
            ELSIF (Opcode = op_not) THEN 
               next_state <= L_NOT;
            ELSIF ((Opcode = op_ldr) OR
                   (Opcode = op_str)) THEN 
               next_state <= CalcADDR;
            ELSIF (Opcode = op_br) THEN 
               next_state <= BR1;
            ELSIF ((Opcode = op_jmp) OR (Opcode = op_ret)) THEN 
               next_state <= JMPRET;
            ELSIF (Opcode = op_lea) THEN 
               next_state <= LEA;
            ELSIF ((Opcode = op_shf) AND (shftop = shft_sll)) THEN 
               next_state <= ALUSLL;
            ELSIF ((Opcode = op_shf) AND (shftop = shft_srl)) THEN 
               next_state <= ALUSRL;
            ELSIF ((Opcode = op_shf) AND (shftop = shft_sra)) THEN 
               next_state <= ALUSRA;
            ELSIF ((Opcode = op_stb) OR (Opcode = op_ldb)) THEN 
               next_state <= CalcADDRB;
            ELSIF ((Opcode = op_sti) OR (Opcode = op_ldi)) THEN 
               next_state <= CalcADDRI;
            ELSIF (Opcode = op_jsr) THEN 
               next_state <= JSRSavePC;
            ELSIF (Opcode = op_trap) THEN 
               next_state <= TrapSavePC;
            ELSE
               next_state <= IF1;
            END IF;
         WHEN ADD => 
            next_state <= IF1;
         WHEN BR1 => 
            IF (( ( n AND CheckN ) OR
                ( p AND CheckP ) OR
                ( z AND CheckZ ) ) = '1') THEN 
               next_state <= BR2;
            ELSE
               next_state <= IF1;
            END IF;
         WHEN BR2 => 
            next_state <= IF1;
         WHEN L_AND => 
            next_state <= IF1;
         WHEN L_NOT => 
            next_state <= IF1;
         WHEN IF1 => 
            next_state <= IF2;
         WHEN IF2 => 
            IF (MRESP_H = '1') THEN 
               next_state <= IF3;
            ELSE
               next_state <= IF2;
            END IF;
         WHEN IF3 => 
            next_state <= Decode;
         WHEN CalcADDR => 
            IF (Opcode = op_str) THEN 
               next_state <= ST1;
            ELSIF (Opcode = op_ldr) THEN 
               next_state <= LD1;
            ELSE
               next_state <= CalcADDR;
            END IF;
         WHEN ST1 => 
            next_state <= ST2;
         WHEN LD1 => 
            IF (MRESP_H = '1') THEN 
               next_state <= LD2;
            ELSE
               next_state <= LD1;
            END IF;
         WHEN ST2 => 
            IF (MRESP_H = '1') THEN 
               next_state <= IF1;
            ELSE
               next_state <= ST2;
            END IF;
         WHEN LD2 => 
            next_state <= IF1;
         WHEN JMPRET => 
            next_state <= IF1;
         WHEN LEA => 
            next_state <= IF1;
         WHEN ALUSRL => 
            next_state <= IF1;
         WHEN ALUSLL => 
            next_state <= IF1;
         WHEN ALUSRA => 
            next_state <= IF1;
         WHEN CalcADDRB => 
            IF (Opcode = op_ldb) THEN 
               next_state <= LDB1;
            ELSIF (Opcode = op_stb) THEN 
               next_state <= STB1;
            ELSE
               next_state <= CalcADDRB;
            END IF;
         WHEN LDB1 => 
            IF ((MRESP_H = '1') AND (ADDRESS_0 = '0')) THEN 
               next_state <= LDB2;
            ELSIF ((MRESP_H = '1') AND (ADDRESS_0 = '1')) THEN 
               next_state <= LDB3;
            ELSE
               next_state <= LDB1;
            END IF;
         WHEN LDB2 => 
            next_state <= IF1;
         WHEN STB1 => 
            IF (ADDRESS_0 = '0') THEN 
               next_state <= STB2;
            ELSIF (ADDRESS_0 = '1') THEN 
               next_state <= STB3;
            ELSE
               next_state <= STB1;
            END IF;
         WHEN STB4 => 
            IF (MRESP_H = '1') THEN 
               next_state <= IF1;
            ELSE
               next_state <= STB4;
            END IF;
         WHEN LDB3 => 
            next_state <= IF1;
         WHEN STB5 => 
            IF (MRESP_H = '1') THEN 
               next_state <= IF1;
            ELSE
               next_state <= STB5;
            END IF;
         WHEN STB3 => 
            next_state <= STB5;
         WHEN STB2 => 
            next_state <= STB4;
         WHEN CalcADDRI => 
            IF (Opcode = op_sti) THEN 
               next_state <= STI1;
            ELSIF (Opcode = op_ldi) THEN 
               next_state <= LDI1;
            ELSE
               next_state <= CalcADDRI;
            END IF;
         WHEN STI1 => 
            IF (MRESP_H = '1') THEN 
               next_state <= STI2;
            ELSE
               next_state <= STI1;
            END IF;
         WHEN LDI1 => 
            IF (MRESP_H = '1') THEN 
               next_state <= LDI2;
            ELSE
               next_state <= LDI1;
            END IF;
         WHEN STI2 => 
            next_state <= STI3;
         WHEN LDI2 => 
            next_state <= LDI3;
         WHEN LDI3 => 
            IF (MRESP_H = '1') THEN 
               next_state <= LDI4;
            ELSE
               next_state <= LDI3;
            END IF;
         WHEN LDI4 => 
            next_state <= IF1;
         WHEN STI3 => 
            next_state <= STI4;
         WHEN STI4 => 
            IF (MRESP_H = '1') THEN 
               next_state <= IF1;
            ELSE
               next_state <= STI4;
            END IF;
         WHEN JSRSavePC => 
            IF (bit11 = '1') THEN 
               next_state <= JSR1;
            ELSIF (bit11 = '0') THEN 
               next_state <= JSRR1;
            ELSE
               next_state <= JSRSavePC;
            END IF;
         WHEN JSR1 => 
            next_state <= IF1;
         WHEN JSRR1 => 
            next_state <= IF1;
         WHEN TrapSavePC => 
            next_state <= TrapCalcAddr;
         WHEN TrapCalcAddr => 
            next_state <= Trap1;
         WHEN s0 => 
            next_state <= s0;
         WHEN Trap1 => 
            IF (MRESP_H = '1') THEN 
               next_state <= Trap2;
            ELSE
               next_state <= Trap1;
            END IF;
         WHEN Trap2 => 
            next_state <= IF1;
         WHEN OTHERS =>
            next_state <= Reset;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      ADDR2MuxSel <= '0';
      ALUMuxSel <= '0';
      ALUop <= "000";
      DRMuxSel <= '0';
      GenCCMuxSel <= '0';
      LoadIR <= '0';
      LoadMAR <= '0';
      LoadMDR <= '0';
      LoadNZP <= '0';
      LoadPC <= '0';
      MARMuxSel <= "00";
      MDRMux2Sel <= "00";
      MDRMuxSel <= '0';
      MREAD_L <= '1';
      MWRITEH_L <= '1';
      MWRITEL_L <= '1';
      PCMuxSel <= "00";
      RFMux2Sel <= "00";
      RFMuxSel <= "00";
      RegWrite <= '0';
      StoreSR <= '1';
      offset6MuxSel <= '0';

      -- Combined Actions
      CASE current_state IS
         WHEN ADD => 
            ALUop <= alu_add;
            RegWrite <= '1';
            LoadNZP <= '1';
            RFMuxSel <= "01";
         WHEN BR2 => 
            PCMuxSel <= "01";
            LoadPC <= '1';
         WHEN L_AND => 
            ALUop <= alu_and;
            RegWrite <= '1';
            LoadNZP <= '1';
            RFMuxSel <= "01";
         WHEN L_NOT => 
            ALUop <= alu_not;
            RegWrite <= '1';
            LoadNZP <= '1';
            RFMuxSel <= "01";
         WHEN IF1 => 
            LoadMAR <= '1';
            LoadPC <= '1';
         WHEN IF2 => 
            LoadMDR <= '1';
            MREAD_L <= '0' after 6ns;
         WHEN IF3 => 
            LoadIR <= '1';
         WHEN CalcADDR => 
            ALUMuxSel <= '1';
            ALUop <= alu_add;
            MARMuxSel <= "01";
            LoadMAR <= '1';
         WHEN ST1 => 
            StoreSR <= '0';
            ALUop <= alu_pass;
            LoadMDR <= '1';
            MDRMuxSel <= '1';
         WHEN LD1 => 
            LoadMDR <= '1';
            MREAD_L <= '0' after 6ns;
         WHEN ST2 => 
            MWRITEL_L <= '0' after 6ns;
            MWRITEH_L <= '0' after 6ns;
         WHEN LD2 => 
            RegWrite <= '1';
            LoadNZP <= '1';
         WHEN JMPRET => 
            PCMuxSel <= "10";
            LoadPC <= '1';
         WHEN LEA => 
            RegWrite <= '1';
            LoadNZP <= '1';
            RFMuxSel <= "10";
         WHEN ALUSRL => 
            ALUop <= alu_srl;
            RegWrite <= '1';
            LoadNZP <= '1';
            RFMuxSel <= "01";
            offset6MuxSel <= '1';
            ALUMuxSel <= '1';
         WHEN ALUSLL => 
            ALUop <= alu_sll;
            RegWrite <= '1';
            LoadNZP <= '1';
            RFMuxSel <= "01";
            offset6MuxSel <= '1';
            ALUMuxSel <= '1';
         WHEN ALUSRA => 
            ALUop <= alu_sra;
            RegWrite <= '1';
            LoadNZP <= '1';
            RFMuxSel <= "01";
            offset6MuxSel <= '1';
            ALUMuxSel <= '1';
         WHEN CalcADDRB => 
            ALUMuxSel <= '1';
            ALUop <= alu_add;
            offset6MuxSel <= '1';
            MARMuxSel <= "01";
            LoadMAR <= '1';
         WHEN LDB1 => 
            LoadMDR <= '1';
            MREAD_L <= '0' after 6ns;
         WHEN LDB2 => 
            RegWrite <= '1';
            LoadNZP <= '1';
            RFMux2Sel <= "10";
            GenCCMuxSel <= '1';
         WHEN STB1 => 
            StoreSR <= '0';
            ALUop <= alu_pass;
            LoadMDR <= '1';
            MDRMuxSel <= '1';
         WHEN STB4 => 
            MWRITEL_L <= '0' after 6ns;
         WHEN LDB3 => 
            RegWrite <= '1';
            LoadNZP <= '1';
            RFMux2Sel <= "01";
            GenCCMuxSel <= '1';
         WHEN STB5 => 
            MWRITEH_L <= '0' after 6ns;
         WHEN STB3 => 
            StoreSR <= '0';
            ALUop <= alu_pass;
            LoadMDR <= '1';
            MDRMuxSel <= '1';
            MDRMux2Sel <= "10";
         WHEN STB2 => 
            StoreSR <= '0';
            ALUop <= alu_pass;
            LoadMDR <= '1';
            MDRMuxSel <= '1';
            MDRMux2Sel <= "01";
         WHEN CalcADDRI => 
            ALUMuxSel <= '1';
            ALUop <= alu_add;
            MARMuxSel <= "01";
            LoadMAR <= '1';
         WHEN STI1 => 
            LoadMDR <= '1';
            MREAD_L <= '0' after 6ns;
         WHEN LDI1 => 
            LoadMDR <= '1';
            MREAD_L <= '0' after 6ns;
         WHEN STI2 => 
            MarMuxSel <= "10";
            LoadMAR <= '1';
         WHEN LDI2 => 
            MarMuxSel <= "10";
            LoadMAR <= '1';
         WHEN LDI3 => 
            LoadMDR <= '1';
            MREAD_L <= '0' after 6ns;
         WHEN LDI4 => 
            RegWrite <= '1';
            LoadNZP <= '1';
         WHEN STI3 => 
            StoreSR <= '0';
            ALUop <= alu_pass;
            LoadMDR <= '1';
            MDRMuxsel <= '1';
            MREAD_L <= '1';
         WHEN STI4 => 
            MWRITEL_L <= '0' after 6ns;
            MWRITEH_L <= '0' after 6ns;
         WHEN JSRSavePC => 
            RFMuxSel <= "11";
            DRMuxSel <= '1';
            RegWrite <= '1';
         WHEN JSR1 => 
            ADDR2MuxSel <= '1';
            PCMuxSel <= "01";
            LoadPC <= '1';
         WHEN JSRR1 => 
            PCMuxSel <= "10";
            LoadPC <= '1';
         WHEN TrapSavePC => 
            RFMuxSel <= "11";
            DRMuxSel <= '1';
            RegWrite <= '1';
         WHEN TrapCalcAddr => 
            MARMuxSel <= "11";
            LoadMAR <= '1';
         WHEN Trap1 => 
            LoadMDR <= '1';
            MREAD_L <= '0' after 6ns;
         WHEN Trap2 => 
            PCMuxSel <= "11";
            LoadPC <= '1';
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;
