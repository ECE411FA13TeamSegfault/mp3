-- VHDL Entity ece411.L2_Cache_Datapath.symbol
--
-- Created:
--          by - li151.ews (gelib-057-06.ews.illinois.edu)
--          at - 13:46:32 12/06/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY L2_Cache_Datapath IS
   PORT( 
      ADDRESS     : IN     LC3b_word;
      CLK         : IN     STD_LOGIC;
      DATAOUT     : IN     LC3B_OWORD;
      InLoad      : IN     std_logic;
      InWaitHit   : IN     std_logic;
      InWriteBack : IN     std_logic;
      MREAD_L     : IN     std_logic;
      MWRITEH_L   : IN     std_logic;
      MWRITEL_L   : IN     std_logic;
      PMDATAIN    : IN     LC3B_OWORD;
      RESET_L     : IN     STD_LOGIC;
      DATAIN      : OUT    LC3B_OWORD;
      Dirty       : OUT    std_logic;
      MRESP_H     : OUT    std_logic;
      Miss        : OUT    std_logic;
      PMADDRESS   : OUT    LC3b_word;
      PMDATAOUT   : OUT    LC3B_OWORD
   );

-- Declarations

END L2_Cache_Datapath ;

--
-- VHDL Architecture ece411.L2_Cache_Datapath.struct
--
-- Created:
--          by - li151.ews (gelib-057-06.ews.illinois.edu)
--          at - 13:46:33 12/06/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY mp3lib;

ARCHITECTURE struct OF L2_Cache_Datapath IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL A                 : LC3B_WORD;
   SIGNAL A1                : STD_LOGIC;
   SIGNAL A2                : STD_LOGIC;
   SIGNAL A3                : LC3B_WORD;
   SIGNAL AFinalChunk       : LC3B_WORD;
   SIGNAL ASel              : std_logic;
   SIGNAL AccessMem         : std_logic;
   SIGNAL AddressCombineout : LC3b_word;
   SIGNAL AllowWrite0       : std_logic;
   SIGNAL AllowWrite1       : std_logic;
   SIGNAL AllowWrite2       : std_logic;
   SIGNAL AllowWrite3       : std_logic;
   SIGNAL AllowWrite4       : std_logic;
   SIGNAL AllowWrite5       : std_logic;
   SIGNAL AllowWrite6       : std_logic;
   SIGNAL AllowWrite7       : std_logic;
   SIGNAL B                 : LC3B_WORD;
   SIGNAL B1                : LC3B_WORD;
   SIGNAL B324              : std_logic;
   SIGNAL BFinalChunk       : LC3B_WORD;
   SIGNAL BSel              : std_logic;
   SIGNAL C                 : LC3B_WORD;
   SIGNAL C1                : LC3B_WORD;
   SIGNAL CFinalChunk       : LC3B_WORD;
   SIGNAL CSel              : std_logic;
   SIGNAL CacheHit          : std_logic;
   SIGNAL CacheWriteout     : LC3B_OWORD;
   SIGNAL D                 : LC3B_WORD;
   SIGNAL D1                : LC3B_WORD;
   SIGNAL DATAIN1           : LC3B_WORD;
   SIGNAL DFinalChunk       : LC3B_WORD;
   SIGNAL DSel              : std_logic;
   SIGNAL DataInMuxout      : LC3B_OWORD;
   SIGNAL DataOut0          : LC3B_OWORD;
   SIGNAL DataOut1          : LC3B_OWORD;
   SIGNAL DataOut2          : LC3B_OWORD;
   SIGNAL DataOut3          : LC3B_OWORD;
   SIGNAL DataOut4          : LC3B_OWORD;
   SIGNAL DataOut5          : LC3B_OWORD;
   SIGNAL DataOut6          : LC3B_OWORD;
   SIGNAL DataOut7          : LC3B_OWORD;
   SIGNAL DataWriteMuxout   : LC3B_OWORD;
   SIGNAL Decode_LRUOut     : LC3B_BYTE;
   SIGNAL DirtyIn0          : std_logic;
   SIGNAL DirtyIn1          : std_logic;
   SIGNAL DirtyIn2          : std_logic;
   SIGNAL DirtyIn3          : std_logic;
   SIGNAL DirtyIn4          : std_logic;
   SIGNAL DirtyIn5          : std_logic;
   SIGNAL DirtyIn6          : std_logic;
   SIGNAL DirtyIn7          : std_logic;
   SIGNAL DirtyOut0         : std_logic;
   SIGNAL DirtyOut1         : std_logic;
   SIGNAL DirtyOut2         : std_logic;
   SIGNAL DirtyOut3         : std_logic;
   SIGNAL DirtyOut4         : std_logic;
   SIGNAL DirtyOut5         : std_logic;
   SIGNAL DirtyOut6         : std_logic;
   SIGNAL DirtyOut7         : std_logic;
   SIGNAL E                 : LC3B_WORD;
   SIGNAL E1                : LC3B_WORD;
   SIGNAL EFinalChunk       : LC3B_WORD;
   SIGNAL ESel              : std_logic;
   SIGNAL Equal             : std_logic;
   SIGNAL Equal1            : std_logic;
   SIGNAL Equal2            : std_logic;
   SIGNAL Equal3            : std_logic;
   SIGNAL Equal4            : std_logic;
   SIGNAL Equal5            : std_logic;
   SIGNAL Equal6            : std_logic;
   SIGNAL Equal7            : std_logic;
   SIGNAL F                 : LC3B_WORD;
   SIGNAL F10               : std_logic;
   SIGNAL F11               : std_logic;
   SIGNAL F12               : STD_LOGIC;
   SIGNAL F13               : std_logic;
   SIGNAL F14               : STD_LOGIC;
   SIGNAL F15               : std_logic;
   SIGNAL F16               : std_logic;
   SIGNAL F17               : STD_LOGIC;
   SIGNAL F18               : STD_LOGIC;
   SIGNAL F2                : std_logic;
   SIGNAL F24               : std_logic;
   SIGNAL F25               : std_logic;
   SIGNAL F26               : std_logic;
   SIGNAL F27               : std_logic;
   SIGNAL F28               : std_logic;
   SIGNAL F29               : std_logic;
   SIGNAL F3                : std_logic;
   SIGNAL F30               : std_logic;
   SIGNAL F31               : std_logic;
   SIGNAL F32               : std_logic;
   SIGNAL F33               : std_logic;
   SIGNAL F34               : std_logic;
   SIGNAL F35               : std_logic;
   SIGNAL F36               : std_logic;
   SIGNAL F37               : std_logic;
   SIGNAL F38               : std_logic;
   SIGNAL F39               : std_logic;
   SIGNAL F4                : std_logic;
   SIGNAL F40               : std_logic;
   SIGNAL F41               : std_logic;
   SIGNAL F42               : std_logic;
   SIGNAL F43               : std_logic;
   SIGNAL F44               : std_logic;
   SIGNAL F45               : std_logic;
   SIGNAL F46               : std_logic;
   SIGNAL F47               : std_logic;
   SIGNAL F5                : std_logic;
   SIGNAL F6                : LC3B_WORD;
   SIGNAL F7                : std_logic;
   SIGNAL F8                : std_logic;
   SIGNAL F9                : std_logic;
   SIGNAL FFinalChunk       : LC3B_WORD;
   SIGNAL FSel              : std_logic;
   SIGNAL G                 : LC3B_WORD;
   SIGNAL G1                : LC3B_WORD;
   SIGNAL GFinalChunk       : LC3B_WORD;
   SIGNAL GSel              : std_logic;
   SIGNAL H                 : LC3B_WORD;
   SIGNAL H1                : LC3B_WORD;
   SIGNAL HFinalChunk       : LC3B_WORD;
   SIGNAL HSel              : std_logic;
   SIGNAL Hit               : std_logic;
   SIGNAL Index             : LC3B_C_INDEX;
   SIGNAL LRU0              : std_logic;
   SIGNAL LRU1              : std_logic;
   SIGNAL LRU2              : std_logic;
   SIGNAL LRU3              : std_logic;
   SIGNAL LRU4              : std_logic;
   SIGNAL LRU5              : std_logic;
   SIGNAL LRU6              : std_logic;
   SIGNAL LRU7              : std_logic;
   SIGNAL LRUOut            : LC3B_C_SET;
   SIGNAL LRUReg0EN         : STD_LOGIC;
   SIGNAL LRUReg0In         : LC3B_C_SET;
   SIGNAL LRUReg1EN         : STD_LOGIC;
   SIGNAL LRUReg1In         : LC3B_C_SET;
   SIGNAL LRUReg2EN         : STD_LOGIC;
   SIGNAL LRUReg2In         : LC3B_C_SET;
   SIGNAL LRUReg3EN         : STD_LOGIC;
   SIGNAL LRUReg3In         : LC3B_C_SET;
   SIGNAL LRUReg4EN         : STD_LOGIC;
   SIGNAL LRUReg4In         : LC3B_C_SET;
   SIGNAL LRUReg5EN         : STD_LOGIC;
   SIGNAL LRUReg5In         : LC3B_C_SET;
   SIGNAL LRUReg6EN         : STD_LOGIC;
   SIGNAL LRUReg6In         : LC3B_C_SET;
   SIGNAL LRUReg7EN         : STD_LOGIC;
   SIGNAL LRUReg7In         : LC3B_C_SET;
   SIGNAL MRU0              : std_logic;
   SIGNAL MRU1              : std_logic;
   SIGNAL MRU2              : std_logic;
   SIGNAL MRU3              : std_logic;
   SIGNAL MRU4              : std_logic;
   SIGNAL MRU5              : std_logic;
   SIGNAL MRU6              : std_logic;
   SIGNAL MRU7              : std_logic;
   SIGNAL MRUSelOut         : LC3B_C_SET;
   SIGNAL Move1ToBack1      : std_logic;
   SIGNAL Move1ToBack2      : std_logic;
   SIGNAL Move1ToBack3      : std_logic;
   SIGNAL Move1ToBack4      : std_logic;
   SIGNAL Move1ToBack5      : std_logic;
   SIGNAL Move1ToBack6      : std_logic;
   SIGNAL Offset            : LC3B_C_OFFSET;
   SIGNAL Tag               : LC3B_C_TAG;
   SIGNAL TagMuxout         : LC3B_C_TAG;
   SIGNAL TagOut0           : LC3B_C_TAG;
   SIGNAL TagOut1           : LC3B_C_TAG;
   SIGNAL TagOut2           : LC3B_C_TAG;
   SIGNAL TagOut3           : LC3B_C_TAG;
   SIGNAL TagOut4           : LC3B_C_TAG;
   SIGNAL TagOut5           : LC3B_C_TAG;
   SIGNAL TagOut6           : LC3B_C_TAG;
   SIGNAL TagOut7           : LC3B_C_TAG;
   SIGNAL ValidOut0         : std_logic;
   SIGNAL ValidOut1         : std_logic;
   SIGNAL ValidOut2         : std_logic;
   SIGNAL ValidOut3         : std_logic;
   SIGNAL ValidOut4         : std_logic;
   SIGNAL ValidOut5         : std_logic;
   SIGNAL ValidOut6         : std_logic;
   SIGNAL ValidOut7         : std_logic;
   SIGNAL ValidWindowout    : std_logic;
   SIGNAL Way0Hit           : std_logic;
   SIGNAL Way1Hit           : std_logic;
   SIGNAL Way2Hit           : std_logic;
   SIGNAL Way3Hit           : std_logic;
   SIGNAL Way4Hit           : std_logic;
   SIGNAL Way5Hit           : std_logic;
   SIGNAL Way6Hit           : std_logic;
   SIGNAL Way7Hit           : std_logic;
   SIGNAL WayData           : LC3B_OWORD;
   SIGNAL WhichHit          : LC3B_C_SET;
   SIGNAL delayed           : std_logic;


   -- Component Declarations
   COMPONENT AddressCombine
   PORT (
      Index             : IN     LC3B_C_INDEX;
      TagMuxout         : IN     LC3B_C_TAG;
      AddressCombineout : OUT    LC3b_word
   );
   END COMPONENT;
   COMPONENT AddressSplit
   PORT (
      ADDRESS : IN     LC3b_word;
      Index   : OUT    LC3B_C_INDEX;
      Offset  : OUT    LC3B_C_OFFSET;
      Tag     : OUT    LC3B_C_TAG
   );
   END COMPONENT;
   COMPONENT BitMux8
   PORT (
      Sel : IN     LC3B_C_SET ;
      x0  : IN     std_logic ;
      x1  : IN     std_logic ;
      x2  : IN     std_logic ;
      x3  : IN     std_logic ;
      x4  : IN     std_logic ;
      x5  : IN     std_logic ;
      x6  : IN     std_logic ;
      x7  : IN     std_logic ;
      F   : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT BitSplit
   PORT (
      x  : IN     LC3B_BYTE ;
      f0 : OUT    std_logic ;
      f1 : OUT    std_logic ;
      f2 : OUT    std_logic ;
      f3 : OUT    std_logic ;
      f4 : OUT    std_logic ;
      f5 : OUT    std_logic ;
      f6 : OUT    std_logic ;
      f7 : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT COMP8_3
   PORT (
      A : IN     LC3B_C_SET ;
      B : IN     LC3B_C_SET ;
      F : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT ChunkWriter
   PORT (
      CacheData  : IN     LC3B_WORD ;
      DataOut    : IN     LC3B_WORD ;
      MWriteH_L  : IN     std_logic ;
      MWriteL_L  : IN     std_logic ;
      Sel        : IN     std_logic ;
      FinalChunk : OUT    LC3B_WORD 
   );
   END COMPONENT;
   COMPONENT ClockDelay2
   PORT (
      clk : IN     std_logic;
      F   : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT DataArray
   PORT (
      DataIn    : IN     LC3B_OWORD;
      DataWrite : IN     std_logic;
      Index     : IN     LC3B_C_INDEX;
      RESET_L   : IN     std_logic;
      clk       : IN     std_logic;
      DataOut   : OUT    LC3B_OWORD
   );
   END COMPONENT;
   COMPONENT DataWordMux
   PORT (
      A      : IN     LC3B_WORD;
      B      : IN     LC3B_WORD;
      C      : IN     LC3B_WORD;
      D      : IN     LC3B_WORD;
      E      : IN     LC3B_WORD;
      F      : IN     LC3B_WORD;
      G      : IN     LC3B_WORD;
      H      : IN     LC3B_WORD;
      Offset : IN     LC3B_C_OFFSET;
      DATAIN : OUT    LC3B_WORD
   );
   END COMPONENT;
   COMPONENT DirtyArray
   PORT (
      DirtyIn    : IN     std_logic;
      DirtyWrite : IN     std_logic;
      Index      : IN     LC3B_C_INDEX;
      RESET_L    : IN     std_logic;
      clk        : IN     std_logic;
      DirtyOut   : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT ENCODE8_3
   PORT (
      x0 : IN     std_logic ;
      x1 : IN     std_logic ;
      x2 : IN     std_logic ;
      x3 : IN     std_logic ;
      x4 : IN     std_logic ;
      x5 : IN     std_logic ;
      x6 : IN     std_logic ;
      x7 : IN     std_logic ;
      F  : OUT    LC3B_C_SET 
   );
   END COMPONENT;
   COMPONENT LRUReg0
   PORT (
      LRUReg0EN : IN     STD_LOGIC ;
      CLK       : IN     STD_LOGIC ;
      LRUOut    : OUT    LC3B_C_SET ;
      LRUReg0In : IN     LC3B_C_SET ;
      RESET_L   : IN     STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT LRUReg1
   PORT (
      LRUReg1EN : IN     STD_LOGIC ;
      LRUReg0In : OUT    LC3B_C_SET ;
      LRUReg1In : IN     LC3B_C_SET ;
      RESET_L   : IN     STD_LOGIC ;
      CLK       : IN     STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT LRUReg2
   PORT (
      LRUReg2EN : IN     STD_LOGIC ;
      LRUReg1In : OUT    LC3B_C_SET ;
      LRUReg2In : IN     LC3B_C_SET ;
      RESET_L   : IN     STD_LOGIC ;
      CLK       : IN     STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT LRUReg3
   PORT (
      LRUReg3EN : IN     STD_LOGIC ;
      LRUReg2In : OUT    LC3B_C_SET ;
      LRUReg3In : IN     LC3B_C_SET ;
      RESET_L   : IN     STD_LOGIC ;
      CLK       : IN     STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT LRUReg4
   PORT (
      LRUReg4EN : IN     STD_LOGIC ;
      LRUReg3In : OUT    LC3B_C_SET ;
      LRUReg4In : IN     LC3B_C_SET ;
      RESET_L   : IN     STD_LOGIC ;
      CLK       : IN     STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT LRUReg5
   PORT (
      LRUReg5EN : IN     STD_LOGIC ;
      LRUReg4In : OUT    LC3B_C_SET ;
      LRUReg5In : IN     LC3B_C_SET ;
      RESET_L   : IN     STD_LOGIC ;
      CLK       : IN     STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT LRUReg6
   PORT (
      LRUReg6EN : IN     STD_LOGIC ;
      LRUReg5In : OUT    LC3B_C_SET ;
      LRUReg6In : IN     LC3B_C_SET ;
      RESET_L   : IN     STD_LOGIC ;
      CLK       : IN     STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT LRUReg7
   PORT (
      LRUReg7In : IN     LC3B_C_SET ;
      LRUReg7EN : IN     STD_LOGIC ;
      LRUReg6In : OUT    LC3B_C_SET ;
      RESET_L   : IN     STD_LOGIC ;
      CLK       : IN     STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT MUX8_3
   PORT (
      Sel : IN     LC3B_C_SET ;
      x0  : IN     LC3B_C_SET ;
      x1  : IN     LC3B_C_SET ;
      x2  : IN     LC3B_C_SET ;
      x3  : IN     LC3B_C_SET ;
      x4  : IN     LC3B_C_SET ;
      x5  : IN     LC3B_C_SET ;
      x6  : IN     LC3B_C_SET ;
      x7  : IN     LC3B_C_SET ;
      F   : OUT    LC3B_C_SET 
   );
   END COMPONENT;
   COMPONENT OWordMux2
   PORT (
      A   : IN     LC3B_OWORD;
      B   : IN     LC3B_OWORD;
      Sel : IN     std_logic;
      F   : OUT    LC3B_OWORD
   );
   END COMPONENT;
   COMPONENT OWordMux8
   PORT (
      Sel : IN     LC3B_C_SET ;
      x0  : IN     LC3B_OWORD ;
      x1  : IN     LC3B_OWORD ;
      x2  : IN     LC3B_OWORD ;
      x3  : IN     LC3B_OWORD ;
      x4  : IN     LC3B_OWORD ;
      x5  : IN     LC3B_OWORD ;
      x6  : IN     LC3B_OWORD ;
      x7  : IN     LC3B_OWORD ;
      F   : OUT    LC3B_OWORD 
   );
   END COMPONENT;
   COMPONENT TagArray
   PORT (
      Index    : IN     LC3B_C_INDEX;
      RESET_L  : IN     std_logic;
      TagIn    : IN     LC3B_C_TAG;
      TagWrite : IN     std_logic;
      clk      : IN     std_logic;
      TagOut   : OUT    LC3B_C_TAG
   );
   END COMPONENT;
   COMPONENT TagComparator
   PORT (
      TagA  : IN     LC3B_C_TAG;
      TagB  : IN     LC3B_C_TAG;
      Equal : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT TagMux8
   PORT (
      Sel : IN     LC3B_C_SET ;
      x0  : IN     LC3B_C_TAG ;
      x1  : IN     LC3B_C_TAG ;
      x2  : IN     LC3B_C_TAG ;
      x3  : IN     LC3B_C_TAG ;
      x4  : IN     LC3B_C_TAG ;
      x5  : IN     LC3B_C_TAG ;
      x6  : IN     LC3B_C_TAG ;
      x7  : IN     LC3B_C_TAG ;
      F   : OUT    LC3B_C_TAG 
   );
   END COMPONENT;
   COMPONENT ValidArray
   PORT (
      Index      : IN     LC3B_C_INDEX;
      RESET_L    : IN     std_logic;
      ValidIn    : IN     std_logic;
      ValidWrite : IN     std_logic;
      clk        : IN     std_logic;
      ValidOut   : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT ValidWindow
   PORT (
      clk            : IN     std_logic;
      delayed        : IN     std_logic;
      ValidWindowout : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT WordMux2
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      Sel : IN     std_logic ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT WordSplit
   PORT (
      WayData : IN     LC3B_OWORD;
      A       : OUT    LC3B_WORD;
      B       : OUT    LC3B_WORD;
      C       : OUT    LC3B_WORD;
      D       : OUT    LC3B_WORD;
      E       : OUT    LC3B_WORD;
      F       : OUT    LC3B_WORD;
      G       : OUT    LC3B_WORD;
      H       : OUT    LC3B_WORD
   );
   END COMPONENT;
   COMPONENT WriteJoin
   PORT (
      AFinalChunk   : IN     LC3B_WORD;
      BFinalChunk   : IN     LC3B_WORD;
      CFinalChunk   : IN     LC3B_WORD;
      DFinalChunk   : IN     LC3B_WORD;
      EFinalChunk   : IN     LC3B_WORD;
      FFinalChunk   : IN     LC3B_WORD;
      GFinalChunk   : IN     LC3B_WORD;
      HFinalChunk   : IN     LC3B_WORD;
      CacheWriteout : OUT    LC3B_OWORD
   );
   END COMPONENT;
   COMPONENT WriteOffsetDecode
   PORT (
      Offset : IN     LC3B_C_OFFSET;
      ASel   : OUT    std_logic;
      BSel   : OUT    std_logic;
      CSel   : OUT    std_logic;
      DSel   : OUT    std_logic;
      ESel   : OUT    std_logic;
      FSel   : OUT    std_logic;
      GSel   : OUT    std_logic;
      HSel   : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT AND2
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT DECODE3_8
   PORT (
      A : IN     STD_LOGIC_VECTOR (2 DOWNTO 0);
      F : OUT    LC3B_BYTE 
   );
   END COMPONENT;
   COMPONENT NAND2
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT NAND3
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      C : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT NOT1
   PORT (
      A : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT OR2
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : AND2 USE ENTITY mp3lib.AND2;
   FOR ALL : AddressCombine USE ENTITY ece411.AddressCombine;
   FOR ALL : AddressSplit USE ENTITY ece411.AddressSplit;
   FOR ALL : BitMux8 USE ENTITY ece411.BitMux8;
   FOR ALL : BitSplit USE ENTITY ece411.BitSplit;
   FOR ALL : COMP8_3 USE ENTITY ece411.COMP8_3;
   FOR ALL : ChunkWriter USE ENTITY ece411.ChunkWriter;
   FOR ALL : ClockDelay2 USE ENTITY ece411.ClockDelay2;
   FOR ALL : DECODE3_8 USE ENTITY mp3lib.DECODE3_8;
   FOR ALL : DataArray USE ENTITY ece411.DataArray;
   FOR ALL : DataWordMux USE ENTITY ece411.DataWordMux;
   FOR ALL : DirtyArray USE ENTITY ece411.DirtyArray;
   FOR ALL : ENCODE8_3 USE ENTITY ece411.ENCODE8_3;
   FOR ALL : LRUReg0 USE ENTITY ece411.LRUReg0;
   FOR ALL : LRUReg1 USE ENTITY ece411.LRUReg1;
   FOR ALL : LRUReg2 USE ENTITY ece411.LRUReg2;
   FOR ALL : LRUReg3 USE ENTITY ece411.LRUReg3;
   FOR ALL : LRUReg4 USE ENTITY ece411.LRUReg4;
   FOR ALL : LRUReg5 USE ENTITY ece411.LRUReg5;
   FOR ALL : LRUReg6 USE ENTITY ece411.LRUReg6;
   FOR ALL : LRUReg7 USE ENTITY ece411.LRUReg7;
   FOR ALL : MUX8_3 USE ENTITY ece411.MUX8_3;
   FOR ALL : NAND2 USE ENTITY mp3lib.NAND2;
   FOR ALL : NAND3 USE ENTITY mp3lib.NAND3;
   FOR ALL : NOT1 USE ENTITY mp3lib.NOT1;
   FOR ALL : OR2 USE ENTITY mp3lib.OR2;
   FOR ALL : OWordMux2 USE ENTITY ece411.OWordMux2;
   FOR ALL : OWordMux8 USE ENTITY ece411.OWordMux8;
   FOR ALL : TagArray USE ENTITY ece411.TagArray;
   FOR ALL : TagComparator USE ENTITY ece411.TagComparator;
   FOR ALL : TagMux8 USE ENTITY ece411.TagMux8;
   FOR ALL : ValidArray USE ENTITY ece411.ValidArray;
   FOR ALL : ValidWindow USE ENTITY ece411.ValidWindow;
   FOR ALL : WordMux2 USE ENTITY ece411.WordMux2;
   FOR ALL : WordSplit USE ENTITY ece411.WordSplit;
   FOR ALL : WriteJoin USE ENTITY ece411.WriteJoin;
   FOR ALL : WriteOffsetDecode USE ENTITY ece411.WriteOffsetDecode;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 2 eb2
   -- PMDATAOUT = DataWriteMuxout
   PMDATAOUT <= DataWriteMuxout;

   -- HDL Embedded Text Block 3 eb3
   -- MRESP_H = Hit
   MRESP_H <= Hit;

   -- HDL Embedded Text Block 4 eb4
   -- DATAIN = WayData
   DATAIN <= WayData;


   -- Instance port mappings.
   aAddressCombine : AddressCombine
      PORT MAP (
         Index             => Index,
         TagMuxout         => TagMuxout,
         AddressCombineout => AddressCombineout
      );
   aAddressSplit : AddressSplit
      PORT MAP (
         ADDRESS => ADDRESS,
         Index   => Index,
         Offset  => Offset,
         Tag     => Tag
      );
   aDirtyMux : BitMux8
      PORT MAP (
         Sel => LRUOut,
         x0  => DirtyOut0,
         x1  => DirtyOut1,
         x2  => DirtyOut2,
         x3  => DirtyOut3,
         x4  => DirtyOut4,
         x5  => DirtyOut5,
         x6  => DirtyOut6,
         x7  => DirtyOut7,
         F   => Dirty
      );
   BytetoBits : BitSplit
      PORT MAP (
         x  => Decode_LRUOut,
         f0 => LRU0,
         f1 => LRU1,
         f2 => LRU2,
         f3 => LRU3,
         f4 => LRU4,
         f5 => LRU5,
         f6 => LRU6,
         f7 => LRU7
      );
   Reg0ToBack : COMP8_3
      PORT MAP (
         A => LRUOut,
         B => WhichHit,
         F => MRU0
      );
   Reg1ToBack : COMP8_3
      PORT MAP (
         A => LRUReg0In,
         B => WhichHit,
         F => MRU1
      );
   Reg2ToBack : COMP8_3
      PORT MAP (
         A => LRUReg1In,
         B => WhichHit,
         F => MRU2
      );
   Reg3ToBack : COMP8_3
      PORT MAP (
         A => LRUReg2In,
         B => WhichHit,
         F => MRU3
      );
   Reg4ToBack : COMP8_3
      PORT MAP (
         A => LRUReg3In,
         B => WhichHit,
         F => MRU4
      );
   Reg5ToBack : COMP8_3
      PORT MAP (
         A => LRUReg4In,
         B => WhichHit,
         F => MRU5
      );
   Reg6ToBack : COMP8_3
      PORT MAP (
         A => LRUReg5In,
         B => WhichHit,
         F => MRU6
      );
   Reg7ToBack : COMP8_3
      PORT MAP (
         A => LRUReg6In,
         B => WhichHit,
         F => MRU7
      );
   AWriter : ChunkWriter
      PORT MAP (
         CacheData  => A,
         DataOut    => DATAIN1,
         MWriteH_L  => MWRITEH_L,
         MWriteL_L  => MWRITEL_L,
         Sel        => ASel,
         FinalChunk => AFinalChunk
      );
   BWriter : ChunkWriter
      PORT MAP (
         CacheData  => B,
         DataOut    => DATAIN1,
         MWriteH_L  => MWRITEH_L,
         MWriteL_L  => MWRITEL_L,
         Sel        => BSel,
         FinalChunk => BFinalChunk
      );
   CWriter : ChunkWriter
      PORT MAP (
         CacheData  => C,
         DataOut    => DATAIN1,
         MWriteH_L  => MWRITEH_L,
         MWriteL_L  => MWRITEL_L,
         Sel        => CSel,
         FinalChunk => CFinalChunk
      );
   DWriter : ChunkWriter
      PORT MAP (
         CacheData  => D,
         DataOut    => DATAIN1,
         MWriteH_L  => MWRITEH_L,
         MWriteL_L  => MWRITEL_L,
         Sel        => DSel,
         FinalChunk => DFinalChunk
      );
   EWriter : ChunkWriter
      PORT MAP (
         CacheData  => E,
         DataOut    => DATAIN1,
         MWriteH_L  => MWRITEH_L,
         MWriteL_L  => MWRITEL_L,
         Sel        => ESel,
         FinalChunk => EFinalChunk
      );
   FWriter : ChunkWriter
      PORT MAP (
         CacheData  => F,
         DataOut    => DATAIN1,
         MWriteH_L  => MWRITEH_L,
         MWriteL_L  => MWRITEL_L,
         Sel        => FSel,
         FinalChunk => FFinalChunk
      );
   GWriter : ChunkWriter
      PORT MAP (
         CacheData  => G,
         DataOut    => DATAIN1,
         MWriteH_L  => MWRITEH_L,
         MWriteL_L  => MWRITEL_L,
         Sel        => GSel,
         FinalChunk => GFinalChunk
      );
   HWriter : ChunkWriter
      PORT MAP (
         CacheData  => H,
         DataOut    => DATAIN1,
         MWriteH_L  => MWRITEH_L,
         MWriteL_L  => MWRITEL_L,
         Sel        => HSel,
         FinalChunk => HFinalChunk
      );
   Delay42ns : ClockDelay2
      PORT MAP (
         clk => CLK,
         F   => delayed
      );
   DataArray0 : DataArray
      PORT MAP (
         DataIn    => DataInMuxout,
         DataWrite => AllowWrite0,
         Index     => Index,
         RESET_L   => RESET_L,
         DataOut   => DataOut0,
         clk       => CLK
      );
   DataArray1 : DataArray
      PORT MAP (
         DataIn    => DataInMuxout,
         DataWrite => AllowWrite1,
         Index     => Index,
         RESET_L   => RESET_L,
         DataOut   => DataOut1,
         clk       => CLK
      );
   DataArray2 : DataArray
      PORT MAP (
         DataIn    => DataInMuxout,
         DataWrite => AllowWrite2,
         Index     => Index,
         RESET_L   => RESET_L,
         DataOut   => DataOut2,
         clk       => CLK
      );
   DataArray3 : DataArray
      PORT MAP (
         DataIn    => DataInMuxout,
         DataWrite => AllowWrite3,
         Index     => Index,
         RESET_L   => RESET_L,
         DataOut   => DataOut3,
         clk       => CLK
      );
   DataArray4 : DataArray
      PORT MAP (
         DataIn    => DataInMuxout,
         DataWrite => AllowWrite4,
         Index     => Index,
         RESET_L   => RESET_L,
         DataOut   => DataOut4,
         clk       => CLK
      );
   DataArray5 : DataArray
      PORT MAP (
         DataIn    => DataInMuxout,
         DataWrite => AllowWrite5,
         Index     => Index,
         RESET_L   => RESET_L,
         DataOut   => DataOut5,
         clk       => CLK
      );
   DataArray6 : DataArray
      PORT MAP (
         DataIn    => DataInMuxout,
         DataWrite => AllowWrite6,
         Index     => Index,
         RESET_L   => RESET_L,
         DataOut   => DataOut6,
         clk       => CLK
      );
   DataArray7 : DataArray
      PORT MAP (
         DataIn    => DataInMuxout,
         DataWrite => AllowWrite7,
         Index     => Index,
         RESET_L   => RESET_L,
         DataOut   => DataOut7,
         clk       => CLK
      );
   aDataWordMux : DataWordMux
      PORT MAP (
         F      => F6,
         G      => G1,
         H      => H1,
         E      => E1,
         D      => D1,
         C      => C1,
         B      => B1,
         A      => A3,
         Offset => Offset,
         DATAIN => DATAIN1
      );
   DirtyArray0 : DirtyArray
      PORT MAP (
         DirtyIn    => F7,
         DirtyWrite => AllowWrite0,
         Index      => Index,
         RESET_L    => RESET_L,
         clk        => CLK,
         DirtyOut   => DirtyOut0
      );
   DirtyArray1 : DirtyArray
      PORT MAP (
         DirtyIn    => F11,
         DirtyWrite => AllowWrite1,
         Index      => Index,
         RESET_L    => RESET_L,
         clk        => CLK,
         DirtyOut   => DirtyOut1
      );
   DirtyArray2 : DirtyArray
      PORT MAP (
         DirtyIn    => F26,
         DirtyWrite => AllowWrite2,
         Index      => Index,
         RESET_L    => RESET_L,
         clk        => CLK,
         DirtyOut   => DirtyOut2
      );
   DirtyArray3 : DirtyArray
      PORT MAP (
         DirtyIn    => F30,
         DirtyWrite => AllowWrite3,
         Index      => Index,
         RESET_L    => RESET_L,
         clk        => CLK,
         DirtyOut   => DirtyOut3
      );
   DirtyArray4 : DirtyArray
      PORT MAP (
         DirtyIn    => F33,
         DirtyWrite => AllowWrite4,
         Index      => Index,
         RESET_L    => RESET_L,
         clk        => CLK,
         DirtyOut   => DirtyOut4
      );
   DirtyArray5 : DirtyArray
      PORT MAP (
         DirtyIn    => F37,
         DirtyWrite => AllowWrite5,
         Index      => Index,
         RESET_L    => RESET_L,
         clk        => CLK,
         DirtyOut   => DirtyOut5
      );
   DirtyArray6 : DirtyArray
      PORT MAP (
         DirtyIn    => F41,
         DirtyWrite => AllowWrite6,
         Index      => Index,
         RESET_L    => RESET_L,
         clk        => CLK,
         DirtyOut   => DirtyOut6
      );
   DirtyArray7 : DirtyArray
      PORT MAP (
         DirtyIn    => F45,
         DirtyWrite => AllowWrite7,
         Index      => Index,
         RESET_L    => RESET_L,
         clk        => CLK,
         DirtyOut   => DirtyOut7
      );
   MRUSel : ENCODE8_3
      PORT MAP (
         x0 => MRU0,
         x1 => MRU1,
         x2 => MRU2,
         x3 => MRU3,
         x4 => MRU4,
         x5 => MRU5,
         x6 => MRU6,
         x7 => MRU7,
         F  => MRUSelOut
      );
   WayHitEncode : ENCODE8_3
      PORT MAP (
         x0 => Way0Hit,
         x1 => Way1Hit,
         x2 => Way2Hit,
         x3 => Way3Hit,
         x4 => Way4Hit,
         x5 => Way5Hit,
         x6 => Way6Hit,
         x7 => Way7Hit,
         F  => WhichHit
      );
   aLRUReg0 : LRUReg0
      PORT MAP (
         LRUReg0EN => LRUReg0EN,
         CLK       => CLK,
         LRUOut    => LRUOut,
         LRUReg0In => LRUReg0In,
         RESET_L   => RESET_L
      );
   aLRUReg1 : LRUReg1
      PORT MAP (
         LRUReg1EN => LRUReg1EN,
         LRUReg0In => LRUReg0In,
         LRUReg1In => LRUReg1In,
         RESET_L   => RESET_L,
         CLK       => CLK
      );
   aLRUReg2 : LRUReg2
      PORT MAP (
         LRUReg2EN => LRUReg2EN,
         LRUReg1In => LRUReg1In,
         LRUReg2In => LRUReg2In,
         RESET_L   => RESET_L,
         CLK       => CLK
      );
   aLRUReg3 : LRUReg3
      PORT MAP (
         LRUReg3EN => LRUReg3EN,
         LRUReg2In => LRUReg2In,
         LRUReg3In => LRUReg3In,
         RESET_L   => RESET_L,
         CLK       => CLK
      );
   aLRUReg4 : LRUReg4
      PORT MAP (
         LRUReg4EN => LRUReg4EN,
         LRUReg3In => LRUReg3In,
         LRUReg4In => LRUReg4In,
         RESET_L   => RESET_L,
         CLK       => CLK
      );
   aLRUReg5 : LRUReg5
      PORT MAP (
         LRUReg5EN => LRUReg5EN,
         LRUReg4In => LRUReg4In,
         LRUReg5In => LRUReg5In,
         RESET_L   => RESET_L,
         CLK       => CLK
      );
   aLRUReg6 : LRUReg6
      PORT MAP (
         LRUReg6EN => LRUReg6EN,
         LRUReg5In => LRUReg5In,
         LRUReg6In => LRUReg6In,
         RESET_L   => RESET_L,
         CLK       => CLK
      );
   aLRUReg7 : LRUReg7
      PORT MAP (
         LRUReg7In => LRUReg7In,
         LRUReg7EN => LRUReg7EN,
         LRUReg6In => LRUReg6In,
         RESET_L   => RESET_L,
         CLK       => CLK
      );
   MRUMux : MUX8_3
      PORT MAP (
         Sel => MRUSelOut,
         x0  => LRUOut,
         x1  => LRUReg0In,
         x2  => LRUReg1In,
         x3  => LRUReg2In,
         x4  => LRUReg3In,
         x5  => LRUReg4In,
         x6  => LRUReg5In,
         x7  => LRUReg6In,
         F   => LRUReg7In
      );
   DataInMux : OWordMux2
      PORT MAP (
         A   => CacheWriteout,
         B   => PMDATAIN,
         Sel => InLoad,
         F   => DataInMuxout
      );
   aDataMux : OWordMux8
      PORT MAP (
         Sel => WhichHit,
         x0  => DataOut0,
         x1  => DataOut1,
         x2  => DataOut2,
         x3  => DataOut3,
         x4  => DataOut4,
         x5  => DataOut5,
         x6  => DataOut6,
         x7  => DataOut7,
         F   => WayData
      );
   aDataWriteMux : OWordMux8
      PORT MAP (
         Sel => LRUOut,
         x0  => DataOut0,
         x1  => DataOut1,
         x2  => DataOut2,
         x3  => DataOut3,
         x4  => DataOut4,
         x5  => DataOut5,
         x6  => DataOut6,
         x7  => DataOut7,
         F   => DataWriteMuxout
      );
   TagArray0 : TagArray
      PORT MAP (
         Index    => Index,
         RESET_L  => RESET_L,
         TagIn    => Tag,
         TagWrite => AllowWrite0,
         clk      => CLK,
         TagOut   => TagOut0
      );
   TagArray1 : TagArray
      PORT MAP (
         Index    => Index,
         RESET_L  => RESET_L,
         TagIn    => Tag,
         TagWrite => AllowWrite1,
         clk      => CLK,
         TagOut   => TagOut1
      );
   TagArray2 : TagArray
      PORT MAP (
         Index    => Index,
         RESET_L  => RESET_L,
         TagIn    => Tag,
         TagWrite => AllowWrite2,
         clk      => CLK,
         TagOut   => TagOut2
      );
   TagArray3 : TagArray
      PORT MAP (
         Index    => Index,
         RESET_L  => RESET_L,
         TagIn    => Tag,
         TagWrite => AllowWrite3,
         clk      => CLK,
         TagOut   => TagOut3
      );
   TagArray4 : TagArray
      PORT MAP (
         Index    => Index,
         RESET_L  => RESET_L,
         TagIn    => Tag,
         TagWrite => AllowWrite4,
         clk      => CLK,
         TagOut   => TagOut4
      );
   TagArray5 : TagArray
      PORT MAP (
         Index    => Index,
         RESET_L  => RESET_L,
         TagIn    => Tag,
         TagWrite => AllowWrite5,
         clk      => CLK,
         TagOut   => TagOut5
      );
   TagArray6 : TagArray
      PORT MAP (
         Index    => Index,
         RESET_L  => RESET_L,
         TagIn    => Tag,
         TagWrite => AllowWrite6,
         clk      => CLK,
         TagOut   => TagOut6
      );
   TagArray7 : TagArray
      PORT MAP (
         Index    => Index,
         RESET_L  => RESET_L,
         TagIn    => Tag,
         TagWrite => AllowWrite7,
         clk      => CLK,
         TagOut   => TagOut7
      );
   TagComparator0 : TagComparator
      PORT MAP (
         TagA  => Tag,
         TagB  => TagOut0,
         Equal => Equal
      );
   TagComparator1 : TagComparator
      PORT MAP (
         TagA  => Tag,
         TagB  => TagOut1,
         Equal => Equal1
      );
   TagComparator2 : TagComparator
      PORT MAP (
         TagA  => Tag,
         TagB  => TagOut2,
         Equal => Equal2
      );
   TagComparator3 : TagComparator
      PORT MAP (
         TagA  => Tag,
         TagB  => TagOut3,
         Equal => Equal3
      );
   TagComparator4 : TagComparator
      PORT MAP (
         TagA  => Tag,
         TagB  => TagOut4,
         Equal => Equal4
      );
   TagComparator5 : TagComparator
      PORT MAP (
         TagA  => Tag,
         TagB  => TagOut5,
         Equal => Equal5
      );
   TagComparator6 : TagComparator
      PORT MAP (
         TagA  => Tag,
         TagB  => TagOut6,
         Equal => Equal6
      );
   TagComparator7 : TagComparator
      PORT MAP (
         TagA  => Tag,
         TagB  => TagOut7,
         Equal => Equal7
      );
   aTagMux8 : TagMux8
      PORT MAP (
         Sel => LRUOut,
         x0  => TagOut0,
         x1  => TagOut1,
         x2  => TagOut2,
         x3  => TagOut3,
         x4  => TagOut4,
         x5  => TagOut5,
         x6  => TagOut6,
         x7  => TagOut7,
         F   => TagMuxout
      );
   ValidArray0 : ValidArray
      PORT MAP (
         Index      => Index,
         RESET_L    => RESET_L,
         ValidIn    => AllowWrite0,
         ValidWrite => AllowWrite0,
         clk        => CLK,
         ValidOut   => ValidOut0
      );
   ValidArray1 : ValidArray
      PORT MAP (
         Index      => Index,
         RESET_L    => RESET_L,
         ValidIn    => AllowWrite1,
         ValidWrite => AllowWrite1,
         clk        => CLK,
         ValidOut   => ValidOut1
      );
   ValidArray2 : ValidArray
      PORT MAP (
         Index      => Index,
         RESET_L    => RESET_L,
         ValidIn    => AllowWrite2,
         ValidWrite => AllowWrite2,
         clk        => CLK,
         ValidOut   => ValidOut2
      );
   ValidArray3 : ValidArray
      PORT MAP (
         Index      => Index,
         RESET_L    => RESET_L,
         ValidIn    => AllowWrite3,
         ValidWrite => AllowWrite3,
         clk        => CLK,
         ValidOut   => ValidOut3
      );
   ValidArray4 : ValidArray
      PORT MAP (
         Index      => Index,
         RESET_L    => RESET_L,
         ValidIn    => AllowWrite4,
         ValidWrite => AllowWrite4,
         clk        => CLK,
         ValidOut   => ValidOut4
      );
   ValidArray5 : ValidArray
      PORT MAP (
         Index      => Index,
         RESET_L    => RESET_L,
         ValidIn    => AllowWrite5,
         ValidWrite => AllowWrite5,
         clk        => CLK,
         ValidOut   => ValidOut5
      );
   ValidArray6 : ValidArray
      PORT MAP (
         Index      => Index,
         RESET_L    => RESET_L,
         ValidIn    => AllowWrite6,
         ValidWrite => AllowWrite6,
         clk        => CLK,
         ValidOut   => ValidOut6
      );
   ValidArray7 : ValidArray
      PORT MAP (
         Index      => Index,
         RESET_L    => RESET_L,
         ValidIn    => AllowWrite7,
         ValidWrite => AllowWrite7,
         clk        => CLK,
         ValidOut   => ValidOut7
      );
   aValidWindow : ValidWindow
      PORT MAP (
         clk            => CLK,
         delayed        => delayed,
         ValidWindowout => ValidWindowout
      );
   PMADDRESSMux : WordMux2
      PORT MAP (
         A   => ADDRESS,
         B   => AddressCombineout,
         Sel => InWriteBack,
         F   => PMADDRESS
      );
   aWordSplit : WordSplit
      PORT MAP (
         A       => A,
         B       => B,
         C       => C,
         E       => E,
         F       => F,
         G       => G,
         H       => H,
         D       => D,
         WayData => WayData
      );
   aWordSplit2 : WordSplit
      PORT MAP (
         A       => A3,
         B       => B1,
         C       => C1,
         E       => E1,
         F       => F6,
         G       => G1,
         H       => H1,
         D       => D1,
         WayData => DATAOUT
      );
   aWriteJoin : WriteJoin
      PORT MAP (
         AFinalChunk   => AFinalChunk,
         BFinalChunk   => BFinalChunk,
         CFinalChunk   => CFinalChunk,
         DFinalChunk   => DFinalChunk,
         EFinalChunk   => EFinalChunk,
         FFinalChunk   => FFinalChunk,
         GFinalChunk   => GFinalChunk,
         HFinalChunk   => HFinalChunk,
         CacheWriteout => CacheWriteout
      );
   aWriteOffsetDecode : WriteOffsetDecode
      PORT MAP (
         Offset => Offset,
         ASel   => ASel,
         BSel   => BSel,
         CSel   => CSel,
         DSel   => DSel,
         ESel   => ESel,
         FSel   => FSel,
         GSel   => GSel,
         HSel   => HSel
      );
   InHit0 : AND2
      PORT MAP (
         A => MRU0,
         B => Hit,
         F => LRUReg0EN
      );
   InHit1 : AND2
      PORT MAP (
         A => B324,
         B => Hit,
         F => LRUReg1EN
      );
   InHit2 : AND2
      PORT MAP (
         A => Move1ToBack1,
         B => Hit,
         F => LRUReg2EN
      );
   InHit3 : AND2
      PORT MAP (
         A => Move1ToBack2,
         B => Hit,
         F => LRUReg3EN
      );
   InHit4 : AND2
      PORT MAP (
         A => Move1ToBack3,
         B => Hit,
         F => LRUReg4EN
      );
   InHit5 : AND2
      PORT MAP (
         A => Move1ToBack4,
         B => Hit,
         F => LRUReg5EN
      );
   InHit6 : AND2
      PORT MAP (
         A => Move1ToBack5,
         B => Hit,
         F => LRUReg6EN
      );
   InHit7 : AND2
      PORT MAP (
         A => Move1ToBack6,
         B => Hit,
         F => LRUReg7EN
      );
   U_0 : AND2
      PORT MAP (
         A => InLoad,
         B => LRU0,
         F => F10
      );
   U_1 : AND2
      PORT MAP (
         A => Hit,
         B => Way0Hit,
         F => F8
      );
   U_2 : AND2
      PORT MAP (
         A => F9,
         B => F8,
         F => DirtyIn0
      );
   U_3 : AND2
      PORT MAP (
         A => DirtyIn0,
         B => DirtyIn0,
         F => F7
      );
   U_4 : AND2
      PORT MAP (
         A => DirtyIn1,
         B => DirtyIn1,
         F => F11
      );
   U_5 : AND2
      PORT MAP (
         A => InLoad,
         B => LRU1,
         F => F15
      );
   U_6 : AND2
      PORT MAP (
         A => F13,
         B => F16,
         F => DirtyIn1
      );
   U_7 : AND2
      PORT MAP (
         A => Hit,
         B => Way1Hit,
         F => F16
      );
   U_13 : AND2
      PORT MAP (
         A => Equal,
         B => ValidOut0,
         F => Way0Hit
      );
   U_14 : AND2
      PORT MAP (
         A => Equal1,
         B => ValidOut1,
         F => Way1Hit
      );
   U_18 : AND2
      PORT MAP (
         A => AccessMem,
         B => F2,
         F => F4
      );
   U_19 : AND2
      PORT MAP (
         A => CacheHit,
         B => AccessMem,
         F => F3
      );
   U_20 : AND2
      PORT MAP (
         A => ValidWindowout,
         B => InWaitHit,
         F => F5
      );
   U_21 : AND2
      PORT MAP (
         A => F5,
         B => F3,
         F => Hit
      );
   U_22 : AND2
      PORT MAP (
         A => InWaitHit,
         B => F4,
         F => Miss
      );
   U_23 : AND2
      PORT MAP (
         A => Equal2,
         B => ValidOut2,
         F => Way2Hit
      );
   U_24 : AND2
      PORT MAP (
         A => Equal3,
         B => ValidOut3,
         F => Way3Hit
      );
   U_25 : AND2
      PORT MAP (
         A => Equal4,
         B => ValidOut4,
         F => Way4Hit
      );
   U_26 : AND2
      PORT MAP (
         A => Equal5,
         B => ValidOut5,
         F => Way5Hit
      );
   U_27 : AND2
      PORT MAP (
         A => Equal6,
         B => ValidOut6,
         F => Way6Hit
      );
   U_28 : AND2
      PORT MAP (
         A => Equal7,
         B => ValidOut7,
         F => Way7Hit
      );
   U_36 : AND2
      PORT MAP (
         A => Hit,
         B => Way2Hit,
         F => F24
      );
   U_37 : AND2
      PORT MAP (
         A => InLoad,
         B => LRU2,
         F => F25
      );
   U_38 : AND2
      PORT MAP (
         A => F27,
         B => F24,
         F => DirtyIn2
      );
   U_40 : AND2
      PORT MAP (
         A => DirtyIn2,
         B => DirtyIn2,
         F => F26
      );
   U_42 : AND2
      PORT MAP (
         A => Hit,
         B => Way3Hit,
         F => F29
      );
   U_43 : AND2
      PORT MAP (
         A => InLoad,
         B => LRU3,
         F => F28
      );
   U_44 : AND2
      PORT MAP (
         A => F31,
         B => F29,
         F => DirtyIn3
      );
   U_46 : AND2
      PORT MAP (
         A => DirtyIn3,
         B => DirtyIn3,
         F => F30
      );
   U_47 : AND2
      PORT MAP (
         A => Hit,
         B => Way4Hit,
         F => F35
      );
   U_49 : AND2
      PORT MAP (
         A => F32,
         B => F35,
         F => DirtyIn4
      );
   U_50 : AND2
      PORT MAP (
         A => InLoad,
         B => LRU4,
         F => F34
      );
   U_52 : AND2
      PORT MAP (
         A => DirtyIn4,
         B => DirtyIn4,
         F => F33
      );
   U_53 : AND2
      PORT MAP (
         A => Hit,
         B => Way5Hit,
         F => F39
      );
   U_55 : AND2
      PORT MAP (
         A => F36,
         B => F39,
         F => DirtyIn5
      );
   U_56 : AND2
      PORT MAP (
         A => InLoad,
         B => LRU5,
         F => F38
      );
   U_58 : AND2
      PORT MAP (
         A => DirtyIn5,
         B => DirtyIn5,
         F => F37
      );
   U_59 : AND2
      PORT MAP (
         A => Hit,
         B => Way6Hit,
         F => F43
      );
   U_61 : AND2
      PORT MAP (
         A => F40,
         B => F43,
         F => DirtyIn6
      );
   U_62 : AND2
      PORT MAP (
         A => InLoad,
         B => LRU6,
         F => F42
      );
   U_64 : AND2
      PORT MAP (
         A => DirtyIn6,
         B => DirtyIn6,
         F => F41
      );
   U_65 : AND2
      PORT MAP (
         A => Hit,
         B => Way7Hit,
         F => F47
      );
   U_67 : AND2
      PORT MAP (
         A => F44,
         B => F47,
         F => DirtyIn7
      );
   U_68 : AND2
      PORT MAP (
         A => InLoad,
         B => LRU7,
         F => F46
      );
   U_70 : AND2
      PORT MAP (
         A => DirtyIn7,
         B => DirtyIn7,
         F => F45
      );
   U_29 : DECODE3_8
      PORT MAP (
         A => LRUOut,
         F => Decode_LRUOut
      );
   U_11 : NAND2
      PORT MAP (
         A => MWRITEH_L,
         B => MWRITEL_L,
         F => F9
      );
   U_12 : NAND2
      PORT MAP (
         A => MWRITEH_L,
         B => MWRITEL_L,
         F => F13
      );
   U_35 : NAND2
      PORT MAP (
         A => MWRITEH_L,
         B => MWRITEL_L,
         F => F27
      );
   U_41 : NAND2
      PORT MAP (
         A => MWRITEH_L,
         B => MWRITEL_L,
         F => F31
      );
   U_48 : NAND2
      PORT MAP (
         A => MWRITEH_L,
         B => MWRITEL_L,
         F => F32
      );
   U_54 : NAND2
      PORT MAP (
         A => MWRITEH_L,
         B => MWRITEL_L,
         F => F36
      );
   U_60 : NAND2
      PORT MAP (
         A => MWRITEH_L,
         B => MWRITEL_L,
         F => F40
      );
   U_66 : NAND2
      PORT MAP (
         A => MWRITEH_L,
         B => MWRITEL_L,
         F => F44
      );
   U_15 : NAND3
      PORT MAP (
         A => MREAD_L,
         B => MWRITEH_L,
         C => MWRITEL_L,
         F => AccessMem
      );
   U_17 : NOT1
      PORT MAP (
         A => CacheHit,
         F => F2
      );
   Move1 : OR2
      PORT MAP (
         A => MRU1,
         B => MRU0,
         F => B324
      );
   Move2 : OR2
      PORT MAP (
         A => MRU2,
         B => B324,
         F => Move1ToBack1
      );
   Move3 : OR2
      PORT MAP (
         A => MRU3,
         B => Move1ToBack1,
         F => Move1ToBack2
      );
   Move4 : OR2
      PORT MAP (
         A => MRU4,
         B => Move1ToBack2,
         F => Move1ToBack3
      );
   Move5 : OR2
      PORT MAP (
         A => MRU5,
         B => Move1ToBack3,
         F => Move1ToBack4
      );
   Move6 : OR2
      PORT MAP (
         A => MRU6,
         B => Move1ToBack4,
         F => Move1ToBack5
      );
   Move7 : OR2
      PORT MAP (
         A => MRU7,
         B => Move1ToBack5,
         F => Move1ToBack6
      );
   U_8 : OR2
      PORT MAP (
         A => F10,
         B => DirtyIn0,
         F => AllowWrite0
      );
   U_9 : OR2
      PORT MAP (
         A => F15,
         B => DirtyIn1,
         F => AllowWrite1
      );
   U_16 : OR2
      PORT MAP (
         A => A2,
         B => F18,
         F => CacheHit
      );
   U_30 : OR2
      PORT MAP (
         A => Way1Hit,
         B => Way0Hit,
         F => F14
      );
   U_31 : OR2
      PORT MAP (
         A => Way3Hit,
         B => Way2Hit,
         F => F17
      );
   U_33 : OR2
      PORT MAP (
         A => Way5Hit,
         B => Way4Hit,
         F => F12
      );
   U_34 : OR2
      PORT MAP (
         A => Way7Hit,
         B => Way6Hit,
         F => A1
      );
   U_39 : OR2
      PORT MAP (
         A => F25,
         B => DirtyIn2,
         F => AllowWrite2
      );
   U_45 : OR2
      PORT MAP (
         A => F28,
         B => DirtyIn3,
         F => AllowWrite3
      );
   U_51 : OR2
      PORT MAP (
         A => F34,
         B => DirtyIn4,
         F => AllowWrite4
      );
   U_57 : OR2
      PORT MAP (
         A => F38,
         B => DirtyIn5,
         F => AllowWrite5
      );
   U_63 : OR2
      PORT MAP (
         A => F42,
         B => DirtyIn6,
         F => AllowWrite6
      );
   U_69 : OR2
      PORT MAP (
         A => F46,
         B => DirtyIn7,
         F => AllowWrite7
      );
   U_71 : OR2
      PORT MAP (
         A => F17,
         B => F14,
         F => F18
      );
   U_72 : OR2
      PORT MAP (
         A => A1,
         B => F12,
         F => A2
      );

END struct;
