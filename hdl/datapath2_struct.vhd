-- VHDL Entity ece411.Datapath2.interface
--
-- Created:
--          by - li151.ews (gelib-057-21.ews.illinois.edu)
--          at - 20:33:08 12/06/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Datapath2 IS
   PORT( 
      CLK         : IN     STD_LOGIC;
      D_DATAIN    : IN     LC3B_WORD;
      D_MRESP_H   : IN     STD_LOGIC;
      I_DATAIN    : IN     LC3B_WORD;
      I_MRESP_H   : IN     STD_LOGIC;
      RESET_L     : IN     STD_LOGIC;
      Start_H     : IN     std_logic;
      D_ADDRESS   : OUT    LC3b_word;
      D_DATAOUT   : OUT    LC3b_word;
      D_MREAD_L   : OUT    std_logic;
      D_MWRITEH_L : OUT    std_logic;
      D_MWRITEL_L : OUT    std_logic;
      I_ADDRESS   : OUT    LC3B_WORD;
      I_MREAD_L   : OUT    std_logic
   );

-- Declarations

END Datapath2 ;

--
-- VHDL Architecture ece411.Datapath2.struct
--
-- Created:
--          by - li151.ews (gelib-057-21.ews.illinois.edu)
--          at - 20:33:09 12/06/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY mp3lib;

ARCHITECTURE struct OF Datapath2 IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL A2                : STD_LOGIC;
   SIGNAL ADDR1Muxsel1      : std_logic;
   SIGNAL ADDR2Muxsel1      : LC3B_4MUX_SEL;
   SIGNAL ALUMuxsel1        : LC3B_4MUX_SEL;
   SIGNAL ALUop1            : LC3B_ALUOP;
   SIGNAL B                 : STD_LOGIC;
   SIGNAL CONTROL           : CONTROL_WORD;
   SIGNAL CheckN            : std_logic;
   SIGNAL CheckP            : std_logic;
   SIGNAL CheckZ            : std_logic;
   SIGNAL CorrectPredictNT  : STD_LOGIC;
   SIGNAL DRMUXSEL          : STD_LOGIC;
   SIGNAL Derp              : std_logic;
   SIGNAL EX_ADJ8out        : LC3b_word;
   SIGNAL EX_ADJ9out        : LC3b_word;
   SIGNAL EX_ALU            : LC3b_word;
   SIGNAL EX_ALUOUT         : LC3b_word;
   SIGNAL EX_BRAdd          : LC3b_word;
   SIGNAL EX_BRAddout       : LC3b_word;
   SIGNAL EX_CONTROL_OUT    : CONTROL_WORD;
   SIGNAL EX_Opcode         : LC3b_opcode;
   SIGNAL EX_PCMUXSEL       : LC3b_4MUX_SEL;
   SIGNAL EX_PCPlus2        : LC3b_word;
   SIGNAL EX_RFA            : LC3b_word;
   SIGNAL EX_RFA1           : LC3b_word;
   SIGNAL EX_StoreMuxsel    : std_logic;
   SIGNAL EX_dest           : LC3b_reg;
   SIGNAL EX_regWrite       : std_logic;
   SIGNAL F                 : STD_LOGIC;
   SIGNAL F1                : STD_LOGIC;
   SIGNAL F10               : STD_LOGIC;
   SIGNAL F11               : STD_LOGIC;
   SIGNAL F12               : STD_LOGIC;
   SIGNAL F13               : STD_LOGIC;
   SIGNAL F14               : STD_LOGIC;
   SIGNAL F15               : STD_LOGIC;
   SIGNAL F16               : STD_LOGIC;
   SIGNAL F17               : STD_LOGIC;
   SIGNAL F18               : LC3b_word;
   SIGNAL F19               : std_logic;
   SIGNAL F2                : STD_LOGIC;
   SIGNAL F20               : STD_LOGIC;
   SIGNAL F21               : STD_LOGIC;
   SIGNAL F22               : STD_LOGIC;
   SIGNAL F3                : STD_LOGIC;
   SIGNAL F4                : STD_LOGIC;
   SIGNAL F5                : STD_LOGIC;
   SIGNAL F6                : STD_LOGIC;
   SIGNAL F7                : STD_LOGIC;
   SIGNAL F8                : STD_LOGIC;
   SIGNAL F9                : STD_LOGIC;
   SIGNAL FUMuxsel          : LC3B_4MUX_SEL;
   SIGNAL GenCCMuxsel1      : std_logic;
   SIGNAL ID_ADJ11out       : LC3b_word;
   SIGNAL ID_ADJ6out        : LC3b_word;
   SIGNAL ID_ADJ8out        : LC3b_word;
   SIGNAL ID_ADJ9out        : LC3b_word;
   SIGNAL ID_CONTROL_OUT    : CONTROL_WORD;
   SIGNAL ID_IMM5out        : LC3b_word;
   SIGNAL ID_IR             : LC3b_word;
   SIGNAL ID_Opcode         : LC3b_opcode;
   SIGNAL ID_PCPlus2        : LC3b_word;
   SIGNAL ID_RFA            : LC3b_word;
   SIGNAL ID_RFAout         : LC3b_word;
   SIGNAL ID_RFB            : LC3b_word;
   SIGNAL ID_RFBout         : LC3b_word;
   SIGNAL ID_SEXT6out       : LC3b_word;
   SIGNAL ID_SrcA           : LC3B_reg;
   SIGNAL ID_SrcB           : LC3B_reg;
   SIGNAL ID_dest           : LC3b_reg;
   SIGNAL IF_ADJ11out       : LC3b_word;
   SIGNAL IF_ADJ6out        : LC3b_word;
   SIGNAL IF_ADJ8out        : LC3b_word;
   SIGNAL IF_ADJ9out        : LC3b_word;
   SIGNAL IF_BR_Opcode      : std_logic;
   SIGNAL IF_CONTROL_OUT    : CONTROL_WORD;
   SIGNAL IF_IMM5           : LC3B_IMM5;
   SIGNAL IF_IMM5out        : LC3b_word;
   SIGNAL IF_INDEX6         : LC3B_INDEX6;
   SIGNAL IF_IR             : LC3b_word;
   SIGNAL IF_IR11           : std_logic;
   SIGNAL IF_IR11out        : std_logic;
   SIGNAL IF_IR4out         : std_logic;
   SIGNAL IF_IR5            : std_logic;
   SIGNAL IF_IR5out         : std_logic;
   SIGNAL IF_IRout          : LC3b_word;
   SIGNAL IF_N              : std_logic;
   SIGNAL IF_OFFSET11       : LC3B_OFFSET11;
   SIGNAL IF_OFFSET9        : LC3B_OFFSET9;
   SIGNAL IF_Opcode         : LC3b_opcode;
   SIGNAL IF_P              : std_logic;
   SIGNAL IF_PCPlus2        : LC3b_word;
   SIGNAL IF_PCPlus2out     : LC3b_word;
   SIGNAL IF_SEXT6out       : LC3b_word;
   SIGNAL IF_SrcA           : LC3b_reg;
   SIGNAL IF_SrcB           : LC3b_reg;
   SIGNAL IF_TRAPVECT8      : LC3b_TRAPVECT8;
   SIGNAL IF_Z              : std_logic;
   SIGNAL IF_dest           : LC3b_reg;
   SIGNAL IF_opcodeout      : LC3b_opcode;
   SIGNAL I_MREAD_L2        : std_logic;
   SIGNAL LDI               : std_logic;
   SIGNAL Load              : std_logic;
   SIGNAL LoadNZP1          : std_logic;
   SIGNAL LoadPC            : STD_LOGIC;
   SIGNAL MARMuxsel         : LC3B_4MUX_SEL;
   SIGNAL MDRMuxsel         : LC3B_4MUX_SEL;
   SIGNAL MEM_ADJ9out       : LC3b_word;
   SIGNAL MEM_ALU           : LC3b_word;
   SIGNAL MEM_BRAdd         : LC3b_word;
   SIGNAL MEM_BR_Opcode     : std_logic;
   SIGNAL MEM_ByteMuxsel    : std_logic;
   SIGNAL MEM_ByteMuxsel1   : std_logic;
   SIGNAL MEM_CONTROL_OUT   : CONTROL_WORD;
   SIGNAL MEM_DRMUXSEL      : std_logic;
   SIGNAL MEM_MARout        : LC3b_word;
   SIGNAL MEM_MDR           : LC3b_word;
   SIGNAL MEM_MDRout        : LC3b_word;
   SIGNAL MEM_Opcode        : LC3b_opcode;
   SIGNAL MEM_PC            : LC3b_word;
   SIGNAL MEM_PCMuxSEL      : LC3b_4MUX_SEL;
   SIGNAL MEM_PCPlus2       : LC3b_word;
   SIGNAL MEM_READY_H       : STD_LOGIC;
   SIGNAL MEM_RFA           : LC3b_word;
   SIGNAL MEM_dest          : LC3b_reg;
   SIGNAL MREAD_L           : std_logic;
   SIGNAL MWRITEH_L         : std_logic;
   SIGNAL MWRITEL_L         : std_logic;
   SIGNAL Mispredict        : STD_LOGIC;
   SIGNAL PCMuxsel          : LC3b_4Mux_sel;
   SIGNAL PredictedDest     : LC3B_WORD;
   SIGNAL RFA_Forwarded     : LC3B_word;
   SIGNAL RFB_Forwarded     : LC3B_word;
   SIGNAL RFMux2sel1        : LC3B_4MUX_SEL;
   SIGNAL RFMuxsel1         : std_logic;
   SIGNAL Read_H            : std_logic;
   SIGNAL RegWrite          : std_logic;
   SIGNAL RegWrite1         : std_logic;
   SIGNAL STB               : std_logic;
   SIGNAL STI               : std_logic;
   SIGNAL STOREMUXSEL1      : std_LOGIC;
   SIGNAL StoreMuxsel       : std_logic;
   SIGNAL TakeBR            : std_logic;
   SIGNAL TakeBRanch0       : STD_LOGIC;
   SIGNAL TakeBRanch1       : STD_LOGIC;
   SIGNAL TakeBRanch2       : STD_LOGIC;
   SIGNAL TakeBRanch3       : STD_LOGIC;
   SIGNAL TakeBRanch4       : std_logic;
   SIGNAL UCBrSel           : std_logic;
   SIGNAL WB_RFMuxout       : LC3b_word;
   SIGNAL WB_WriteRegisters : std_logic;
   SIGNAL Write_H           : std_logic;
   SIGNAL n                 : std_logic;
   SIGNAL p                 : std_logic;
   SIGNAL preCorrectPredict : STD_LOGIC;
   SIGNAL preLoad2          : std_logic;
   SIGNAL preLoadPC         : STD_LOGIC;
   SIGNAL test              : STD_LOGIC;
   SIGNAL z                 : std_logic;

   -- Implicit buffer signal declarations
   SIGNAL I_MREAD_L_internal : std_logic;


   -- Component Declarations
   COMPONENT ADJ_SEXT_Unit
   PORT (
      IF_IMM5      : IN     LC3b_imm5 ;
      IF_INDEX6    : IN     LC3b_index6 ;
      IF_OFFSET11  : IN     LC3b_offset11 ;
      IF_OFFSET9   : IN     LC3b_offset9 ;
      IF_TRAPVECT8 : IN     LC3b_trapvect8 ;
      clk          : IN     std_logic ;
      IF_ADJ11out  : OUT    LC3b_word ;
      IF_ADJ6out   : OUT    LC3b_word ;
      IF_ADJ8out   : OUT    LC3b_word ;
      IF_ADJ9out   : OUT    LC3b_word ;
      IF_IMM5out   : OUT    LC3b_word ;
      IF_SEXT6out  : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT BranchPredict
   PORT (
      BR_ADDRESS         : IN     LC3b_word ;
      CLK                : IN     STD_LOGIC ;
      EN                 : IN     std_logic ;
      InputDest          : IN     LC3B_WORD ;
      InputOffset        : IN     LC3B_WORD ;
      InputUnconditional : IN     STD_LOGIC ;
      Input_BR_ADDRESS   : IN     LC3B_WORD ;
      RESET_L            : IN     STD_LOGIC ;
      PredictedDest      : OUT    LC3B_WORD ;
      TakeBranch         : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT COMP4
   PORT (
      A        : IN     LC3b_opcode;
      BROpcode : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT Control_ROM
   PORT (
      IR      : IN     LC3b_word;
      IR11    : IN     std_logic;
      IR4     : IN     std_logic;
      IR5     : IN     std_logic;
      clk     : IN     std_logic;
      opcode  : IN     LC3b_OPCODE;
      start_h : IN     std_logic;
      takeBr  : IN     std_logic;
      CONTROL : OUT    CONTROL_WORD
   );
   END COMPONENT;
   COMPONENT Forwarding_Unit
   PORT (
      CLK           : IN     STD_LOGIC ;
      EXMuxsel      : IN     LC3B_4MUX_Sel ;
      EX_ALU        : IN     LC3B_word ;
      EX_BRAdd      : IN     LC3b_word ;
      EX_MDR        : IN     LC3b_word ;
      EX_PCPlus2    : IN     LC3b_word ;
      EX_dest       : IN     LC3B_reg ;
      EX_regWrite   : IN     STD_LOGIC ;
      Load          : IN     STD_LOGIC ;
      MEM_RFMux     : IN     LC3B_word ;
      MEM_dest      : IN     LC3B_reg ;
      MEM_regWrite  : IN     STD_LOGIC ;
      RESET         : IN     STD_LOGIC ;
      RFA_data      : IN     LC3b_word ;
      RFA_register  : IN     LC3B_reg ;
      RFB_data      : IN     LC3b_word ;
      RFB_register  : IN     LC3B_reg ;
      StoreMuxsel   : IN     STD_LOGIC ;
      dest          : IN     LC3B_Reg ;
      RFA_Forwarded : OUT    LC3B_word ;
      RFB_Forwarded : OUT    LC3B_word 
   );
   END COMPONENT;
   COMPONENT Reg_EX_MEM
   PORT (
      EX_ALUout      : IN     LC3b_word;
      EX_BRAddout    : IN     LC3b_word;
      EX_CONTROL_IN  : IN     CONTROL_WORD;
      ID_ADJ8out     : IN     LC3b_word;
      ID_ADJ9        : IN     LC3b_WORD;
      ID_Opcode      : IN     LC3b_opcode;
      ID_PCPlus2     : IN     LC3b_word;
      ID_RFA         : IN     LC3b_word;
      ID_RFB         : IN     LC3b_word;
      ID_dest        : IN     LC3b_reg;
      Load           : IN     std_logic;
      Reset_L        : IN     std_logic;
      clk            : IN     std_logic;
      EX_ADJ8out     : OUT    LC3b_word;
      EX_ADJ9out     : OUT    LC3b_word;
      EX_ALU         : OUT    LC3b_word;
      EX_BRAdd       : OUT    LC3b_word;
      EX_CONTROL_OUT : OUT    CONTROL_WORD;
      EX_Opcode      : OUT    LC3b_opcode;
      EX_PCMUXSEL    : OUT    LC3b_4MUX_SEL;
      EX_PCPlus2     : OUT    LC3b_word;
      EX_RFA         : OUT    LC3b_word;
      EX_RFB         : OUT    LC3b_word;
      EX_dest        : OUT    LC3b_reg
   );
   END COMPONENT;
   COMPONENT Reg_ID_EX
   PORT (
      ID_CONTROL_IN  : IN     CONTROL_WORD;
      ID_RFAout      : IN     LC3b_word;
      ID_RFBout      : IN     LC3b_word;
      IF_ADJ11out    : IN     LC3b_word;
      IF_ADJ6out     : IN     LC3b_word;
      IF_ADJ8out     : IN     LC3b_word;
      IF_ADJ9out     : IN     LC3b_word;
      IF_IMM5out     : IN     LC3b_word;
      IF_IR          : IN     LC3b_word;
      IF_IR11        : IN     std_logic;
      IF_IR5         : IN     std_logic;
      IF_Opcode      : IN     LC3b_opcode;
      IF_PCPlus2     : IN     LC3b_word;
      IF_SEXT6out    : IN     LC3b_word;
      IF_SrcA        : IN     LC3b_reg;
      IF_SrcB        : IN     LC3b_reg;
      IF_dest        : IN     LC3b_reg;
      Load           : IN     std_logic;
      Reset_L        : IN     std_logic;
      clk            : IN     std_logic;
      ID_ADJ11out    : OUT    LC3b_word;
      ID_ADJ6out     : OUT    LC3b_word;
      ID_ADJ8out     : OUT    LC3b_word;
      ID_ADJ9out     : OUT    LC3b_word;
      ID_CONTROL_OUT : OUT    CONTROL_WORD;
      ID_IMM5out     : OUT    LC3b_word;
      ID_IR          : OUT    LC3b_word;
      ID_IR11        : OUT    std_logic;
      ID_IR5         : OUT    std_logic;
      ID_Opcode      : OUT    LC3b_opcode;
      ID_PCPlus2     : OUT    LC3b_word;
      ID_RFA         : OUT    LC3b_word;
      ID_RFB         : OUT    LC3b_word;
      ID_SEXT6out    : OUT    LC3b_word;
      ID_SrcA        : OUT    LC3B_reg;
      ID_SrcB        : OUT    LC3B_reg;
      ID_dest        : OUT    LC3b_reg
   );
   END COMPONENT;
   COMPONENT Reg_IF_ID
   PORT (
      IF_CONTROL_IN  : IN     CONTROL_WORD;
      IF_IR_IN       : IN     LC3b_word;
      IF_PCPlus2out  : IN     LC3b_word;
      Load           : IN     std_logic;
      Reset_L        : IN     std_logic;
      clk            : IN     std_logic;
      IF_CONTROL_OUT : OUT    CONTROL_WORD;
      IF_IMM5        : OUT    LC3B_IMM5;
      IF_INDEX6      : OUT    LC3B_INDEX6;
      IF_IR          : OUT    LC3b_word;
      IF_IR11        : OUT    std_logic;
      IF_IR5         : OUT    std_logic;
      IF_N           : OUT    std_logic;
      IF_OFFSET11    : OUT    LC3B_OFFSET11;
      IF_OFFSET9     : OUT    LC3B_OFFSET9;
      IF_Opcode      : OUT    LC3b_opcode;
      IF_P           : OUT    std_logic;
      IF_PCPlus2     : OUT    LC3b_word;
      IF_SrcA        : OUT    LC3b_reg;
      IF_SrcB        : OUT    LC3b_reg;
      IF_TRAPVECT8   : OUT    LC3B_TRAPVECT8;
      IF_Z           : OUT    std_logic;
      IF_dest        : OUT    LC3b_reg;
      IF_shftop      : OUT    LC3b_shftop
   );
   END COMPONENT;
   COMPONENT Reg_MEM_WB
   PORT (
      EX_ADJ9out        : IN     LC3b_word;
      EX_ALU            : IN     LC3b_word;
      EX_BRAdd          : IN     LC3b_word;
      EX_Opcode         : IN     LC3b_opcode;
      EX_PCPlus2        : IN     LC3b_word;
      EX_RFA            : IN     LC3b_word;
      EX_dest           : IN     LC3b_reg;
      Load              : IN     std_logic;
      MEM_ByteMuxselout : IN     std_logic;
      MEM_CONTROL_IN    : IN     CONTROL_WORD;
      MEM_MDRout        : IN     LC3b_word;
      Reset_L           : IN     std_logic;
      clk               : IN     std_logic;
      MEM_ADJ9out       : OUT    LC3b_word;
      MEM_ALU           : OUT    LC3b_word;
      MEM_BRAdd         : OUT    LC3b_word;
      MEM_ByteMuxsel    : OUT    std_logic;
      MEM_CONTROL_OUT   : OUT    CONTROL_WORD;
      MEM_DRMUXSEL      : OUT    std_logic;
      MEM_MDR           : OUT    LC3b_word;
      MEM_Opcode        : OUT    LC3b_opcode;
      MEM_PC            : OUT    LC3b_word;
      MEM_PCMuxSEL      : OUT    LC3b_4MUX_SEL;
      MEM_PCPlus2       : OUT    LC3b_word;
      MEM_RFA           : OUT    LC3b_word;
      MEM_dest          : OUT    LC3b_reg
   );
   END COMPONENT;
   COMPONENT Splitter_EX
   PORT (
      CONTROL        : IN     CONTROL_WORD;
      ADDR1Muxsel    : OUT    std_logic;
      ADDR2Muxsel    : OUT    LC3B_4MUX_SEL;
      ALUMuxsel      : OUT    LC3B_4MUX_SEL;
      ALUop          : OUT    LC3B_ALUOP;
      EX_StoreMuxsel : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT Splitter_ID
   PORT (
      CONTROL     : IN     CONTROL_WORD;
      StoreMuxsel : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT Splitter_IF
   PORT (
      CONTROL  : IN     CONTROL_WORD;
      PCMuxsel : OUT    LC3b_4Mux_sel
   );
   END COMPONENT;
   COMPONENT Splitter_MEM
   PORT (
      CONTROL     : IN     CONTROL_WORD;
      EX_regWrite : OUT    std_logic;
      FUMuxsel    : OUT    LC3B_4Mux_sel;
      LDI         : OUT    std_logic;
      MARMuxsel   : OUT    LC3B_4MUX_SEL;
      MDRMuxsel   : OUT    LC3B_4MUX_SEL;
      Read_H      : OUT    std_logic;
      STB         : OUT    std_logic;
      STI         : OUT    std_logic;
      Write_H     : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT Splitter_Stall_Unit
   PORT (
      CONTROL  : IN     CONTROL_WORD;
      RegWrite : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT Splitter_WB
   PORT (
      CONTROL     : IN     CONTROL_WORD;
      DRMUXSEL    : OUT    STD_LOGIC;
      GenCCMuxsel : OUT    std_logic;
      LoadNZP     : OUT    std_logic;
      RFMux2sel   : OUT    LC3B_4MUX_SEL;
      RFMuxsel    : OUT    std_logic;
      RegWrite    : OUT    std_logic;
      STOREMUXSEL : OUT    std_LOGIC
   );
   END COMPONENT;
   COMPONENT Stage_Execute
   PORT (
      ADDR1Muxsel : IN     std_logic ;
      ADDR2Muxsel : IN     LC3b_4mux_sel ;
      ALUMuxsel   : IN     LC3b_4mux_sel ;
      ALUop       : IN     LC3b_aluop ;
      EX_ADJ11    : IN     LC3b_word ;
      EX_ADJ6     : IN     LC3b_word ;
      EX_ADJ9     : IN     LC3b_word ;
      EX_IMM5     : IN     LC3b_word ;
      EX_PCPlus2  : IN     LC3b_word ;
      EX_RFAout   : IN     LC3b_word ;
      EX_RFBout   : IN     LC3b_word ;
      EX_SEXT6    : IN     LC3b_word ;
      ID_IR       : IN     LC3b_word ;
      clk         : IN     std_logic ;
      EX_ALUOUT   : OUT    LC3b_word ;
      EX_BRAddout : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT Stage_ID
   PORT (
      DRMuxsel          : IN     std_logic ;
      ID_RegFileIn      : IN     LC3b_word ;
      ID_SrcA           : IN     LC3b_reg ;
      ID_SrcB           : IN     LC3b_reg ;
      ID_dest           : IN     LC3b_reg ;
      IF_dest           : IN     LC3b_reg ;
      RESET_L           : IN     std_logic ;
      StoreMuxsel_Read  : IN     STD_LOGIC ;
      StoreMuxsel_Write : IN     STD_LOGIC ;
      WB_DRMuxsel       : IN     std_logic ;
      WB_WriteRegisters : IN     std_logic ;
      WB_dest           : IN     LC3b_reg ;
      clk               : IN     std_logic ;
      ID_RFAout         : OUT    LC3b_word ;
      ID_RFBout         : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT Stage_IF
   PORT (
      IF_ADJ9       : IN     LC3b_word ;
      IF_BRAddout   : IN     LC3b_word ;
      IF_MDRout     : IN     LC3b_word ;
      IF_N          : IN     std_logic ;
      IF_Opcodein   : IN     LC3b_Opcode ;
      IF_P          : IN     std_logic ;
      IF_Z          : IN     std_logic ;
      I_DATAIN      : IN     LC3b_word ;
      I_MRESP_H     : IN     std_logic ;
      Load          : IN     std_logic ;
      MEM_OPCODE    : IN     LC3b_OPCODE ;
      PCMuxSel      : IN     LC3b_4mux_sel ;
      PCMuxSel_Wr   : IN     LC3b_4MUX_SEL ;
      RESET_L       : IN     std_logic ;
      RFADD         : IN     LC3b_word ;
      Stall         : IN     std_logic ;
      TakeBR        : IN     std_logic ;
      clk           : IN     std_logic ;
      predictedBr   : IN     LC3b_word ;
      IF_IR11       : OUT    std_logic ;
      IF_IR4        : OUT    std_logic ;
      IF_IR5        : OUT    std_logic ;
      IF_IRout      : OUT    LC3b_word ;
      IF_PCPlus2out : OUT    LC3b_word ;
      IF_PCout      : OUT    LC3b_word ;
      IF_opcode     : OUT    LC3b_opcode ;
      UCBrSel       : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Stage_Memory
   PORT (
      DATAIN         : IN     LC3b_word ;
      EX_RFB         : IN     LC3b_word ;
      LDI            : IN     std_logic ;
      Load           : IN     std_logic ;
      MARMuxsel      : IN     LC3b_4mux_sel ;
      MDRMuxsel      : IN     LC3b_4mux_sel ;
      MEM_ALUout     : IN     LC3b_word ;
      MEM_PCPlus2    : IN     LC3b_word ;
      MEM_TRAPVECT8  : IN     LC3b_word ;
      MRESP_H        : IN     STD_LOGIC ;
      RESET_L        : IN     std_logic ;
      Read_H         : IN     STD_LOGIC ;
      STB            : IN     STD_LOGIC ;
      STI            : IN     std_logic ;
      Write_H        : IN     STD_LOGIC ;
      clk            : IN     std_logic ;
      MEM_ByteMuxsel : OUT    std_logic ;
      MEM_MARout     : OUT    LC3b_word ;
      MEM_MDRout     : OUT    LC3b_word ;
      MEM_READY_H    : OUT    std_logic ;
      MREAD_L        : OUT    std_logic ;
      MWRITEH_L      : OUT    std_logic ;
      MWRITEL_L      : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Stage_WB
   PORT (
      GenCCMuxsel       : IN     std_logic ;
      LoadNZP           : IN     std_logic ;
      RFMux2sel         : IN     LC3b_4mux_sel ;
      RFMuxsel          : IN     std_logic ;
      RegWrite          : IN     std_logic ;
      WB_ALUout         : IN     LC3b_word ;
      WB_BRAddout       : IN     LC3b_word ;
      WB_ByteMuxsel     : IN     std_logic ;
      WB_MDRout         : IN     LC3b_word ;
      WB_PCPlus2out     : IN     LC3b_word ;
      WB_dest           : IN     LC3b_reg ;
      clk               : IN     std_logic ;
      CheckN            : OUT    std_logic ;
      CheckP            : OUT    std_logic ;
      CheckZ            : OUT    std_logic ;
      WB_RFMuxout       : OUT    LC3b_word ;
      WB_WriteRegisters : OUT    std_logic ;
      n                 : OUT    std_logic ;
      p                 : OUT    std_logic ;
      z                 : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Stall_Unit
   PORT (
      Load     : IN     std_logic ;
      RESET_L  : IN     std_logic ;
      RegWrite : IN     STD_LOGIC ;
      clk      : IN     std_logic ;
      dest     : IN     LC3B_REG ;
      srcA     : IN     LC3B_REG ;
      srcB     : IN     LC3B_REG ;
      Stall    : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT VDDgen
   PORT (
      F : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT WordMux2
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      Sel : IN     std_logic ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT checkBR
   PORT (
      CheckN        : IN     std_logic ;
      CheckP        : IN     std_logic ;
      CheckZ        : IN     std_logic ;
      n             : IN     std_logic ;
      p             : IN     std_logic ;
      z             : IN     std_logic ;
      MEM_BR_Opcode : IN     std_logic ;
      IF_BR_Opcode  : IN     std_logic ;
      TakeBR        : OUT    std_logic ;
      IF_N          : IN     std_logic ;
      IF_P          : IN     std_logic ;
      IF_Z          : IN     std_logic 
   );
   END COMPONENT;
   COMPONENT delay_unit
   PORT (
      CLK : IN     STD_LOGIC ;
      A2  : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT delay_unit2
   PORT (
      test     : IN     STD_LOGIC ;
      preLoad2 : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT delay_unit3
   PORT (
      test      : IN     STD_LOGIC ;
      preLoadPC : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT low
   PORT (
      I_MREAD_L : OUT    STD_LOGIC
   );
   END COMPONENT;
   COMPONENT AND2
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT AND3
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      C : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT NOT1
   PORT (
      A : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT OR2
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT OR3
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      C : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT REG1
   PORT (
      RESET_L : IN     STD_LOGIC ;
      A       : IN     STD_LOGIC ;
      EN      : IN     STD_LOGIC ;
      CLK     : IN     STD_LOGIC ;
      F       : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT XNOR2
   PORT (
      A : IN     std_logic ;
      B : IN     std_logic ;
      F : OUT    std_logic 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : ADJ_SEXT_Unit USE ENTITY ece411.ADJ_SEXT_Unit;
   FOR ALL : AND2 USE ENTITY mp3lib.AND2;
   FOR ALL : AND3 USE ENTITY mp3lib.AND3;
   FOR ALL : BranchPredict USE ENTITY ece411.BranchPredict;
   FOR ALL : COMP4 USE ENTITY ece411.COMP4;
   FOR ALL : Control_ROM USE ENTITY ece411.Control_ROM;
   FOR ALL : Forwarding_Unit USE ENTITY ece411.Forwarding_Unit;
   FOR ALL : NOT1 USE ENTITY mp3lib.NOT1;
   FOR ALL : OR2 USE ENTITY mp3lib.OR2;
   FOR ALL : OR3 USE ENTITY mp3lib.OR3;
   FOR ALL : REG1 USE ENTITY mp3lib.REG1;
   FOR ALL : Reg_EX_MEM USE ENTITY ece411.Reg_EX_MEM;
   FOR ALL : Reg_ID_EX USE ENTITY ece411.Reg_ID_EX;
   FOR ALL : Reg_IF_ID USE ENTITY ece411.Reg_IF_ID;
   FOR ALL : Reg_MEM_WB USE ENTITY ece411.Reg_MEM_WB;
   FOR ALL : Splitter_EX USE ENTITY ece411.Splitter_EX;
   FOR ALL : Splitter_ID USE ENTITY ece411.Splitter_ID;
   FOR ALL : Splitter_IF USE ENTITY ece411.Splitter_IF;
   FOR ALL : Splitter_MEM USE ENTITY ece411.Splitter_MEM;
   FOR ALL : Splitter_Stall_Unit USE ENTITY ece411.Splitter_Stall_Unit;
   FOR ALL : Splitter_WB USE ENTITY ece411.Splitter_WB;
   FOR ALL : Stage_Execute USE ENTITY ece411.Stage_Execute;
   FOR ALL : Stage_ID USE ENTITY ece411.Stage_ID;
   FOR ALL : Stage_IF USE ENTITY ece411.Stage_IF;
   FOR ALL : Stage_Memory USE ENTITY ece411.Stage_Memory;
   FOR ALL : Stage_WB USE ENTITY ece411.Stage_WB;
   FOR ALL : Stall_Unit USE ENTITY ece411.Stall_Unit;
   FOR ALL : VDDgen USE ENTITY ece411.VDDgen;
   FOR ALL : WordMux2 USE ENTITY ece411.WordMux2;
   FOR ALL : XNOR2 USE ENTITY mp3lib.XNOR2;
   FOR ALL : checkBR USE ENTITY ece411.checkBR;
   FOR ALL : delay_unit USE ENTITY ece411.delay_unit;
   FOR ALL : delay_unit2 USE ENTITY ece411.delay_unit2;
   FOR ALL : delay_unit3 USE ENTITY ece411.delay_unit3;
   FOR ALL : low USE ENTITY ece411.low;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 2 eb2
   D_ADDRESS <= MEM_MARout;                                

   -- HDL Embedded Text Block 3 eb3
   D_MREAD_L <= MREAD_L;                             

   -- HDL Embedded Text Block 4 eb4
   D_MWRITEH_L <= MWRITEH_L;                               

   -- HDL Embedded Text Block 5 eb5
   D_MWRITEL_L <= MWRITEL_L;                               

   -- HDL Embedded Text Block 6 eb6
   D_DATAOUT <= MEM_MDRout;                              


   -- Instance port mappings.
   aADJ_SEXT_Unit : ADJ_SEXT_Unit
      PORT MAP (
         IF_IMM5      => IF_IMM5,
         IF_INDEX6    => IF_INDEX6,
         IF_OFFSET11  => IF_OFFSET11,
         IF_OFFSET9   => IF_OFFSET9,
         IF_TRAPVECT8 => IF_TRAPVECT8,
         clk          => CLK,
         IF_ADJ11out  => IF_ADJ11out,
         IF_ADJ6out   => IF_ADJ6out,
         IF_ADJ8out   => IF_ADJ8out,
         IF_ADJ9out   => IF_ADJ9out,
         IF_IMM5out   => IF_IMM5out,
         IF_SEXT6out  => IF_SEXT6out
      );
   U_26 : BranchPredict
      PORT MAP (
         BR_ADDRESS         => MEM_PC,
         CLK                => CLK,
         EN                 => MEM_BR_Opcode,
         InputDest          => F18,
         InputOffset        => MEM_ADJ9out,
         InputUnconditional => UCBrSel,
         Input_BR_ADDRESS   => MEM_PC,
         RESET_L            => RESET_L,
         PredictedDest      => PredictedDest,
         TakeBranch         => TakeBRanch0
      );
   U_10 : COMP4
      PORT MAP (
         A        => MEM_Opcode,
         BROpcode => MEM_BR_Opcode
      );
   U_11 : COMP4
      PORT MAP (
         A        => IF_Opcode,
         BROpcode => IF_BR_Opcode
      );
   aControl_ROM : Control_ROM
      PORT MAP (
         clk     => CLK,
         start_h => Start_H,
         opcode  => IF_opcodeout,
         takeBr  => TakeBR,
         IR4     => IF_IR4out,
         IR5     => IF_IR5out,
         IR11    => IF_IR11out,
         IR      => IF_IRout,
         CONTROL => CONTROL
      );
   aForwardingUnit : Forwarding_Unit
      PORT MAP (
         CLK           => CLK,
         EXMuxsel      => FUMuxsel,
         EX_ALU        => EX_ALU,
         EX_BRAdd      => EX_BRAdd,
         EX_MDR        => MEM_MDRout,
         EX_PCPlus2    => EX_PCPlus2,
         EX_dest       => EX_dest,
         EX_regWrite   => EX_regWrite,
         Load          => Load,
         MEM_RFMux     => WB_RFMuxout,
         MEM_dest      => MEM_dest,
         MEM_regWrite  => WB_WriteRegisters,
         RESET         => RESET_L,
         RFA_data      => ID_RFA,
         RFA_register  => ID_SrcA,
         RFB_data      => ID_RFB,
         RFB_register  => ID_SrcB,
         StoreMuxsel   => EX_StoreMuxsel,
         dest          => ID_dest,
         RFA_Forwarded => RFA_Forwarded,
         RFB_Forwarded => RFB_Forwarded
      );
   aReg_EX_MEM : Reg_EX_MEM
      PORT MAP (
         clk            => CLK,
         Reset_L        => F20,
         Load           => Load,
         EX_ALUout      => EX_ALUOUT,
         EX_BRAddout    => EX_BRAddout,
         ID_ADJ9        => ID_ADJ9out,
         ID_Opcode      => ID_Opcode,
         ID_dest        => ID_dest,
         ID_ADJ8out     => ID_ADJ8out,
         ID_PCPlus2     => ID_PCPlus2,
         ID_RFB         => RFB_Forwarded,
         ID_RFA         => RFA_Forwarded,
         EX_ALU         => EX_ALU,
         EX_BRAdd       => EX_BRAdd,
         EX_Opcode      => EX_Opcode,
         EX_dest        => EX_dest,
         EX_ADJ8out     => EX_ADJ8out,
         EX_PCPlus2     => EX_PCPlus2,
         EX_RFB         => EX_RFA,
         EX_RFA         => EX_RFA1,
         EX_PCMUXSEL    => EX_PCMUXSEL,
         EX_ADJ9out     => EX_ADJ9out,
         EX_CONTROL_IN  => ID_CONTROL_OUT,
         EX_CONTROL_OUT => EX_CONTROL_OUT
      );
   aREG_ID_EX : Reg_ID_EX
      PORT MAP (
         clk            => CLK,
         Reset_L        => F20,
         Load           => Load,
         ID_RFAout      => ID_RFAout,
         ID_RFBout      => ID_RFBout,
         IF_SrcA        => IF_SrcA,
         IF_SrcB        => IF_SrcB,
         IF_Opcode      => IF_Opcode,
         IF_dest        => IF_dest,
         IF_IR5         => IF_IR5,
         IF_IR11        => IF_IR11,
         IF_ADJ6out     => IF_ADJ6out,
         IF_ADJ8out     => IF_ADJ8out,
         IF_ADJ9out     => IF_ADJ9out,
         IF_ADJ11out    => IF_ADJ11out,
         IF_IMM5out     => IF_IMM5out,
         IF_SEXT6out    => IF_SEXT6out,
         IF_IR          => IF_IR,
         IF_PCPlus2     => IF_PCPlus2,
         ID_RFA         => ID_RFA,
         ID_RFB         => ID_RFB,
         ID_SrcA        => ID_SrcA,
         ID_SrcB        => ID_SrcB,
         ID_Opcode      => ID_Opcode,
         ID_dest        => ID_dest,
         ID_IR5         => OPEN,
         ID_IR11        => OPEN,
         ID_ADJ6out     => ID_ADJ6out,
         ID_ADJ8out     => ID_ADJ8out,
         ID_ADJ9out     => ID_ADJ9out,
         ID_ADJ11out    => ID_ADJ11out,
         ID_IMM5out     => ID_IMM5out,
         ID_SEXT6out    => ID_SEXT6out,
         ID_IR          => ID_IR,
         ID_PCPlus2     => ID_PCPlus2,
         ID_CONTROL_IN  => IF_CONTROL_OUT,
         ID_CONTROL_OUT => ID_CONTROL_OUT
      );
   aREG_IF_ID : Reg_IF_ID
      PORT MAP (
         clk            => CLK,
         Reset_L        => F20,
         Load           => Load,
         IF_IR_IN       => IF_IRout,
         IF_PCPlus2out  => IF_PCPlus2out,
         IF_IR          => IF_IR,
         IF_IMM5        => IF_IMM5,
         IF_INDEX6      => IF_INDEX6,
         IF_TRAPVECT8   => IF_TRAPVECT8,
         IF_OFFSET9     => IF_OFFSET9,
         IF_OFFSET11    => IF_OFFSET11,
         IF_Opcode      => IF_Opcode,
         IF_SrcA        => IF_SrcA,
         IF_SrcB        => IF_SrcB,
         IF_dest        => IF_dest,
         IF_shftop      => OPEN,
         IF_IR5         => IF_IR5,
         IF_IR11        => IF_IR11,
         IF_PCPlus2     => IF_PCPlus2,
         IF_N           => IF_N,
         IF_Z           => IF_Z,
         IF_P           => IF_P,
         IF_CONTROL_IN  => CONTROL,
         IF_CONTROL_OUT => IF_CONTROL_OUT
      );
   aReg_MEM_WB : Reg_MEM_WB
      PORT MAP (
         clk               => CLK,
         Reset_L           => RESET_L,
         Load              => Load,
         EX_ALU            => EX_ALU,
         EX_BRAdd          => EX_BRAdd,
         EX_PCPlus2        => EX_PCPlus2,
         EX_dest           => EX_dest,
         EX_ADJ9out        => EX_ADJ9out,
         EX_Opcode         => EX_Opcode,
         MEM_MDRout        => MEM_MDRout,
         MEM_ByteMuxselout => MEM_ByteMuxsel,
         EX_RFA            => EX_RFA1,
         MEM_ALU           => MEM_ALU,
         MEM_BRAdd         => MEM_BRAdd,
         MEM_PCPlus2       => MEM_PCPlus2,
         MEM_MDR           => MEM_MDR,
         MEM_ByteMuxsel    => MEM_ByteMuxsel1,
         MEM_dest          => MEM_dest,
         MEM_Opcode        => MEM_Opcode,
         MEM_RFA           => MEM_RFA,
         MEM_DRMUXSEL      => MEM_DRMUXSEL,
         MEM_ADJ9out       => MEM_ADJ9out,
         MEM_PC            => MEM_PC,
         MEM_CONTROL_IN    => EX_CONTROL_OUT,
         MEM_CONTROL_OUT   => MEM_CONTROL_OUT,
         MEM_PCMuxSEL      => MEM_PCMuxSEL
      );
   aSplitter_EX : Splitter_EX
      PORT MAP (
         CONTROL        => ID_CONTROL_OUT,
         ADDR1Muxsel    => ADDR1Muxsel1,
         ADDR2Muxsel    => ADDR2Muxsel1,
         ALUMuxsel      => ALUMuxsel1,
         ALUop          => ALUop1,
         EX_StoreMuxsel => EX_StoreMuxsel
      );
   aSplitter_ID : Splitter_ID
      PORT MAP (
         CONTROL     => IF_CONTROL_OUT,
         StoreMuxsel => StoreMuxsel
      );
   U_8 : Splitter_IF
      PORT MAP (
         CONTROL  => CONTROL,
         PCMuxsel => PCMuxsel
      );
   aSplitter_MEM : Splitter_MEM
      PORT MAP (
         CONTROL     => EX_CONTROL_OUT,
         MARMuxsel   => MARMuxsel,
         MDRMuxsel   => MDRMuxsel,
         Read_H      => Read_H,
         Write_H     => Write_H,
         LDI         => LDI,
         STI         => STI,
         STB         => STB,
         EX_regWrite => EX_regWrite,
         FUMuxsel    => FUMuxsel
      );
   U_2 : Splitter_Stall_Unit
      PORT MAP (
         CONTROL  => CONTROL,
         RegWrite => RegWrite
      );
   aSplitter_WB : Splitter_WB
      PORT MAP (
         CONTROL     => MEM_CONTROL_OUT,
         GenCCMuxsel => GenCCMuxsel1,
         LoadNZP     => LoadNZP1,
         RFMux2sel   => RFMux2sel1,
         RFMuxsel    => RFMuxsel1,
         DRMUXSEL    => DRMUXSEL,
         RegWrite    => RegWrite1,
         STOREMUXSEL => STOREMUXSEL1
      );
   aStage_Execute : Stage_Execute
      PORT MAP (
         ADDR1Muxsel => ADDR1Muxsel1,
         ADDR2Muxsel => ADDR2Muxsel1,
         ALUMuxsel   => ALUMuxsel1,
         ALUop       => ALUop1,
         EX_ADJ11    => ID_ADJ11out,
         EX_ADJ6     => ID_ADJ6out,
         EX_ADJ9     => ID_ADJ9out,
         EX_IMM5     => ID_IMM5out,
         EX_PCPlus2  => ID_PCPlus2,
         EX_RFAout   => RFA_Forwarded,
         EX_RFBout   => RFB_Forwarded,
         EX_SEXT6    => ID_SEXT6out,
         ID_IR       => ID_IR,
         clk         => CLK,
         EX_ALUOUT   => EX_ALUOUT,
         EX_BRAddout => EX_BRAddout
      );
   aStage_ID : Stage_ID
      PORT MAP (
         DRMuxsel          => MEM_DRMUXSEL,
         ID_RegFileIn      => WB_RFMuxout,
         ID_SrcA           => IF_SrcA,
         ID_SrcB           => IF_SrcB,
         ID_dest           => MEM_dest,
         IF_dest           => IF_dest,
         RESET_L           => RESET_L,
         StoreMuxsel_Read  => StoreMuxsel,
         StoreMuxsel_Write => STOREMUXSEL1,
         WB_DRMuxsel       => MEM_DRMUXSEL,
         WB_WriteRegisters => WB_WriteRegisters,
         WB_dest           => MEM_dest,
         clk               => CLK,
         ID_RFAout         => ID_RFAout,
         ID_RFBout         => ID_RFBout
      );
   aStage_IF : Stage_IF
      PORT MAP (
         IF_ADJ9       => IF_ADJ9out,
         IF_BRAddout   => MEM_BRAdd,
         IF_MDRout     => MEM_MDR,
         IF_N          => IF_N,
         IF_Opcodein   => IF_Opcode,
         IF_P          => IF_P,
         IF_Z          => IF_Z,
         I_DATAIN      => I_DATAIN,
         I_MRESP_H     => I_MRESP_H,
         Load          => Load,
         MEM_OPCODE    => MEM_Opcode,
         PCMuxSel      => PCMuxsel,
         PCMuxSel_Wr   => MEM_PCMuxSEL,
         RESET_L       => RESET_L,
         RFADD         => MEM_RFA,
         Stall         => I_MREAD_L_internal,
         TakeBR        => TakeBRanch0,
         clk           => CLK,
         predictedBr   => PredictedDest,
         IF_IR11       => IF_IR11out,
         IF_IR4        => IF_IR4out,
         IF_IR5        => IF_IR5out,
         IF_IRout      => IF_IRout,
         IF_PCPlus2out => IF_PCPlus2out,
         IF_PCout      => I_ADDRESS,
         IF_opcode     => IF_opcodeout,
         UCBrSel       => UCBrSel
      );
   aStage_Memory : Stage_Memory
      PORT MAP (
         DATAIN         => D_DATAIN,
         EX_RFB         => EX_RFA,
         LDI            => LDI,
         Load           => Load,
         MARMuxsel      => MARMuxsel,
         MDRMuxsel      => MDRMuxsel,
         MEM_ALUout     => EX_ALU,
         MEM_PCPlus2    => EX_PCPlus2,
         MEM_TRAPVECT8  => EX_ADJ8out,
         MRESP_H        => D_MRESP_H,
         RESET_L        => RESET_L,
         Read_H         => Read_H,
         STB            => STB,
         STI            => STI,
         Write_H        => Write_H,
         clk            => CLK,
         MEM_ByteMuxsel => MEM_ByteMuxsel,
         MEM_MARout     => MEM_MARout,
         MEM_MDRout     => MEM_MDRout,
         MEM_READY_H    => MEM_READY_H,
         MREAD_L        => MREAD_L,
         MWRITEH_L      => MWRITEH_L,
         MWRITEL_L      => MWRITEL_L
      );
   aStage_WB : Stage_WB
      PORT MAP (
         GenCCMuxsel       => GenCCMuxsel1,
         LoadNZP           => LoadNZP1,
         RFMux2sel         => RFMux2sel1,
         RFMuxsel          => RFMuxsel1,
         RegWrite          => RegWrite1,
         WB_ALUout         => MEM_ALU,
         WB_BRAddout       => MEM_BRAdd,
         WB_ByteMuxsel     => MEM_ByteMuxsel1,
         WB_MDRout         => MEM_MDR,
         WB_PCPlus2out     => MEM_PCPlus2,
         WB_dest           => MEM_dest,
         clk               => CLK,
         CheckN            => CheckN,
         CheckP            => CheckP,
         CheckZ            => CheckZ,
         WB_RFMuxout       => WB_RFMuxout,
         WB_WriteRegisters => WB_WriteRegisters,
         n                 => n,
         p                 => p,
         z                 => z
      );
   aStall_Unit : Stall_Unit
      PORT MAP (
         Load     => Load,
         RESET_L  => RESET_L,
         RegWrite => RegWrite,
         clk      => CLK,
         dest     => IF_dest,
         srcA     => IF_SrcA,
         srcB     => IF_SrcB,
         Stall    => OPEN
      );
   U_47 : VDDgen
      PORT MAP (
         F => CorrectPredictNT
      );
   U_27 : WordMux2
      PORT MAP (
         A   => MEM_PCPlus2,
         B   => MEM_BRAdd,
         Sel => TakeBR,
         F   => F18
      );
   acheckBR : checkBR
      PORT MAP (
         CheckN        => CheckN,
         CheckP        => CheckP,
         CheckZ        => CheckZ,
         n             => n,
         p             => p,
         z             => z,
         MEM_BR_Opcode => MEM_BR_Opcode,
         IF_BR_Opcode  => IF_BR_Opcode,
         TakeBR        => TakeBR,
         IF_N          => IF_N,
         IF_P          => IF_P,
         IF_Z          => IF_Z
      );
   U_6 : delay_unit
      PORT MAP (
         CLK => CLK,
         A2  => A2
      );
   U_3 : delay_unit2
      PORT MAP (
         test     => test,
         preLoad2 => preLoad2
      );
   U_7 : delay_unit3
      PORT MAP (
         test      => test,
         preLoadPC => preLoadPC
      );
   U_0 : low
      PORT MAP (
         I_MREAD_L => I_MREAD_L_internal
      );
   U_4 : AND2
      PORT MAP (
         A => CLK,
         B => B,
         F => test
      );
   U_12 : AND2
      PORT MAP (
         A => F1,
         B => MEM_READY_H,
         F => F8
      );
   U_15 : AND2
      PORT MAP (
         A => F12,
         B => MEM_READY_H,
         F => F3
      );
   U_20 : AND2
      PORT MAP (
         A => F5,
         B => F6,
         F => F7
      );
   U_24 : AND2
      PORT MAP (
         A => F9,
         B => F11,
         F => F10
      );
   U_30 : AND2
      PORT MAP (
         A => F13,
         B => MEM_READY_H,
         F => F16
      );
   U_31 : AND2
      PORT MAP (
         A => F17,
         B => F14,
         F => F15
      );
   U_38 : AND2
      PORT MAP (
         A => Derp,
         B => F19,
         F => preCorrectPredict
      );
   U_40 : AND2
      PORT MAP (
         A => CorrectPredictNT,
         B => RESET_L,
         F => F20
      );
   U_41 : AND2
      PORT MAP (
         A => CorrectPredictNT,
         B => RESET_L,
         F => F20
      );
   U_42 : AND2
      PORT MAP (
         A => CorrectPredictNT,
         B => RESET_L,
         F => F20
      );
   U_44 : AND2
      PORT MAP (
         A => F21,
         B => MEM_BR_Opcode,
         F => Derp
      );
   U_13 : AND3
      PORT MAP (
         A => F2,
         B => preLoad2,
         C => I_MRESP_H,
         F => Load
      );
   U_16 : AND3
      PORT MAP (
         A => F4,
         B => preLoadPC,
         C => I_MRESP_H,
         F => LoadPC
      );
   U_1 : NOT1
      PORT MAP (
         A => F,
         F => I_MREAD_L2
      );
   U_5 : NOT1
      PORT MAP (
         A => A2,
         F => B
      );
   U_18 : NOT1
      PORT MAP (
         A => Read_H,
         F => F5
      );
   U_19 : NOT1
      PORT MAP (
         A => Write_H,
         F => F6
      );
   U_22 : NOT1
      PORT MAP (
         A => Read_H,
         F => F9
      );
   U_23 : NOT1
      PORT MAP (
         A => Write_H,
         F => F11
      );
   U_28 : NOT1
      PORT MAP (
         A => Read_H,
         F => F17
      );
   U_29 : NOT1
      PORT MAP (
         A => Write_H,
         F => F14
      );
   U_39 : NOT1
      PORT MAP (
         A => preCorrectPredict,
         F => Mispredict
      );
   U_46 : NOT1
      PORT MAP (
         A => Derp,
         F => F22
      );
   U_9 : OR2
      PORT MAP (
         A => Read_H,
         B => Write_H,
         F => F1
      );
   U_14 : OR2
      PORT MAP (
         A => Read_H,
         B => Write_H,
         F => F12
      );
   U_17 : OR2
      PORT MAP (
         A => Read_H,
         B => Write_H,
         F => F13
      );
   U_21 : OR2
      PORT MAP (
         A => F8,
         B => F7,
         F => F2
      );
   U_25 : OR2
      PORT MAP (
         A => F3,
         B => F10,
         F => F4
      );
   U_32 : OR2
      PORT MAP (
         A => F16,
         B => F15,
         F => F
      );
   U_45 : OR2
      PORT MAP (
         A => preCorrectPredict,
         B => F22,
         F => OPEN
      );
   U_43 : OR3
      PORT MAP (
         A => CheckN,
         B => CheckZ,
         C => CheckP,
         F => F21
      );
   U_33 : REG1
      PORT MAP (
         RESET_L => RESET_L,
         A       => TakeBRanch0,
         EN      => Load,
         CLK     => CLK,
         F       => TakeBRanch1
      );
   U_34 : REG1
      PORT MAP (
         RESET_L => RESET_L,
         A       => TakeBRanch1,
         EN      => Load,
         CLK     => CLK,
         F       => TakeBRanch2
      );
   U_35 : REG1
      PORT MAP (
         RESET_L => RESET_L,
         A       => TakeBRanch2,
         EN      => Load,
         CLK     => CLK,
         F       => TakeBRanch3
      );
   U_36 : REG1
      PORT MAP (
         RESET_L => RESET_L,
         A       => TakeBRanch3,
         EN      => Load,
         CLK     => CLK,
         F       => TakeBRanch4
      );
   U_37 : XNOR2
      PORT MAP (
         A => TakeBRanch4,
         B => TakeBR,
         F => F19
      );

   -- Implicit buffered output assignments
   I_MREAD_L <= I_MREAD_L_internal;

END struct;
