-- VHDL Entity ece411.BranchPredict.symbol
--
-- Created:
--          by - li151.ews (gelib-057-06.ews.illinois.edu)
--          at - 15:32:40 12/06/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY BranchPredict IS
   PORT( 
      BR_ADDRESS         : IN     LC3b_word;
      CLK                : IN     STD_LOGIC;
      EN                 : IN     std_logic;
      InputDest          : IN     LC3B_WORD;
      InputOffset        : IN     LC3B_WORD;
      InputUnconditional : IN     STD_LOGIC;
      Input_BR_ADDRESS   : IN     LC3B_WORD;
      RESET_L            : IN     STD_LOGIC;
      PredictedDest      : OUT    LC3B_WORD;
      TakeBranch         : OUT    STD_LOGIC
   );

-- Declarations

END BranchPredict ;

--
-- VHDL Architecture ece411.BranchPredict.struct
--
-- Created:
--          by - li151.ews (gelib-057-06.ews.illinois.edu)
--          at - 15:32:41 12/06/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY mp3lib;

ARCHITECTURE struct OF BranchPredict IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL A                 : STD_LOGIC;
   SIGNAL A1                : STD_LOGIC;
   SIGNAL A10               : STD_LOGIC;
   SIGNAL A2                : STD_LOGIC;
   SIGNAL A3                : STD_LOGIC;
   SIGNAL A4                : STD_LOGIC;
   SIGNAL A5                : STD_LOGIC;
   SIGNAL A6                : STD_LOGIC;
   SIGNAL A7                : STD_LOGIC;
   SIGNAL A8                : STD_LOGIC;
   SIGNAL A9                : STD_LOGIC;
   SIGNAL B                 : STD_LOGIC;
   SIGNAL B1                : STD_LOGIC;
   SIGNAL B2                : STD_LOGIC;
   SIGNAL B3                : STD_LOGIC;
   SIGNAL B324              : std_logic;
   SIGNAL B4                : STD_LOGIC;
   SIGNAL B5                : STD_LOGIC;
   SIGNAL B6                : STD_LOGIC;
   SIGNAL B7                : STD_LOGIC;
   SIGNAL DataOut0          : LC3B_WORD;
   SIGNAL DataOut1          : LC3B_WORD;
   SIGNAL DataOut2          : LC3B_WORD;
   SIGNAL DataOut3          : LC3B_WORD;
   SIGNAL DataOut4          : LC3B_WORD;
   SIGNAL DataOut5          : LC3B_WORD;
   SIGNAL DataOut6          : LC3B_WORD;
   SIGNAL DataOut7          : LC3B_WORD;
   SIGNAL Decode_LRUOut     : LC3B_BYTE;
   SIGNAL EN_Delay          : std_logic;
   SIGNAL F                 : STD_LOGIC;
   SIGNAL F1                : STD_LOGIC_VECTOR(15 DOWNTO 0);
   SIGNAL F10               : STD_LOGIC_VECTOR(15 DOWNTO 0);
   SIGNAL F11               : STD_LOGIC_VECTOR(15 DOWNTO 0);
   SIGNAL F12               : STD_LOGIC;
   SIGNAL F13               : STD_LOGIC_VECTOR(15 DOWNTO 0);
   SIGNAL F14               : STD_LOGIC;
   SIGNAL F15               : STD_LOGIC;
   SIGNAL F16               : STD_LOGIC;
   SIGNAL F17               : STD_LOGIC;
   SIGNAL F18               : STD_LOGIC;
   SIGNAL F19               : STD_LOGIC;
   SIGNAL F2                : STD_LOGIC;
   SIGNAL F20               : STD_LOGIC;
   SIGNAL F21               : STD_LOGIC;
   SIGNAL F22               : STD_LOGIC;
   SIGNAL F23               : STD_LOGIC;
   SIGNAL F24               : STD_LOGIC;
   SIGNAL F25               : STD_LOGIC;
   SIGNAL F26               : STD_LOGIC;
   SIGNAL F27               : STD_LOGIC;
   SIGNAL F28               : STD_LOGIC;
   SIGNAL F29               : STD_LOGIC;
   SIGNAL F3                : STD_LOGIC;
   SIGNAL F30               : STD_LOGIC;
   SIGNAL F31               : STD_LOGIC;
   SIGNAL F32               : STD_LOGIC;
   SIGNAL F33               : STD_LOGIC;
   SIGNAL F34               : STD_LOGIC;
   SIGNAL F35               : STD_LOGIC;
   SIGNAL F36               : STD_LOGIC;
   SIGNAL F37               : STD_LOGIC;
   SIGNAL F38               : STD_LOGIC;
   SIGNAL F39               : STD_LOGIC;
   SIGNAL F4                : STD_LOGIC;
   SIGNAL F40               : STD_LOGIC;
   SIGNAL F41               : STD_LOGIC;
   SIGNAL F42               : STD_LOGIC;
   SIGNAL F43               : STD_LOGIC;
   SIGNAL F44               : STD_LOGIC;
   SIGNAL F45               : STD_LOGIC;
   SIGNAL F46               : STD_LOGIC;
   SIGNAL F47               : STD_LOGIC;
   SIGNAL F48               : STD_LOGIC;
   SIGNAL F49               : STD_LOGIC;
   SIGNAL F5                : STD_LOGIC;
   SIGNAL F50               : STD_LOGIC;
   SIGNAL F51               : STD_LOGIC;
   SIGNAL F52               : STD_LOGIC;
   SIGNAL F53               : STD_LOGIC;
   SIGNAL F54               : STD_LOGIC;
   SIGNAL F55               : STD_LOGIC;
   SIGNAL F56               : STD_LOGIC;
   SIGNAL F57               : STD_LOGIC;
   SIGNAL F58               : STD_LOGIC;
   SIGNAL F59               : STD_LOGIC;
   SIGNAL F6                : STD_LOGIC_VECTOR(15 DOWNTO 0);
   SIGNAL F60               : STD_LOGIC;
   SIGNAL F61               : STD_LOGIC;
   SIGNAL F62               : STD_LOGIC;
   SIGNAL F63               : STD_LOGIC;
   SIGNAL F64               : STD_LOGIC;
   SIGNAL F65               : STD_LOGIC;
   SIGNAL F66               : std_logic;
   SIGNAL F67               : STD_LOGIC;
   SIGNAL F68               : std_logic;
   SIGNAL F7                : STD_LOGIC_VECTOR(15 DOWNTO 0);
   SIGNAL F8                : STD_LOGIC_VECTOR(15 DOWNTO 0);
   SIGNAL F9                : STD_LOGIC_VECTOR(15 DOWNTO 0);
   SIGNAL Hit               : std_logic;
   SIGNAL LRU0              : std_logic;
   SIGNAL LRU1              : std_logic;
   SIGNAL LRU2              : std_logic;
   SIGNAL LRU3              : std_logic;
   SIGNAL LRU4              : std_logic;
   SIGNAL LRU5              : std_logic;
   SIGNAL LRU6              : std_logic;
   SIGNAL LRU7              : std_logic;
   SIGNAL LRUOut            : LC3B_C_SET;
   SIGNAL LRUReg0EN         : STD_LOGIC;
   SIGNAL LRUReg0In         : LC3B_C_SET;
   SIGNAL LRUReg1EN         : STD_LOGIC;
   SIGNAL LRUReg1In         : LC3B_C_SET;
   SIGNAL LRUReg2EN         : STD_LOGIC;
   SIGNAL LRUReg2In         : LC3B_C_SET;
   SIGNAL LRUReg3EN         : STD_LOGIC;
   SIGNAL LRUReg3In         : LC3B_C_SET;
   SIGNAL LRUReg4EN         : STD_LOGIC;
   SIGNAL LRUReg4In         : LC3B_C_SET;
   SIGNAL LRUReg5EN         : STD_LOGIC;
   SIGNAL LRUReg5In         : LC3B_C_SET;
   SIGNAL LRUReg6EN         : STD_LOGIC;
   SIGNAL LRUReg6In         : LC3B_C_SET;
   SIGNAL LRUReg7EN         : STD_LOGIC;
   SIGNAL LRUReg7In         : LC3B_C_SET;
   SIGNAL MRU0              : std_logic;
   SIGNAL MRU1              : std_logic;
   SIGNAL MRU2              : std_logic;
   SIGNAL MRU3              : std_logic;
   SIGNAL MRU4              : std_logic;
   SIGNAL MRU5              : std_logic;
   SIGNAL MRU6              : std_logic;
   SIGNAL MRU7              : std_logic;
   SIGNAL MRUSelOut         : LC3B_C_SET;
   SIGNAL Move1ToBack1      : std_logic;
   SIGNAL Move1ToBack2      : std_logic;
   SIGNAL Move1ToBack3      : std_logic;
   SIGNAL Move1ToBack4      : std_logic;
   SIGNAL Move1ToBack5      : std_logic;
   SIGNAL Move1ToBack6      : std_logic;
   SIGNAL OffsetMSB         : STD_LOGIC;
   SIGNAL PredictHit        : STD_LOGIC;
   SIGNAL Unconditional0Out : STD_LOGIC;
   SIGNAL Unconditional1Out : STD_LOGIC;
   SIGNAL Unconditional2Out : STD_LOGIC;
   SIGNAL Unconditional3Out : STD_LOGIC;
   SIGNAL Unconditional4Out : STD_LOGIC;
   SIGNAL Unconditional5Out : STD_LOGIC;
   SIGNAL Unconditional6Out : STD_LOGIC;
   SIGNAL Unconditional7Out : STD_LOGIC;
   SIGNAL ValidWindowout    : std_logic;
   SIGNAL Way0Hit           : std_logic;
   SIGNAL Way1Hit           : std_logic;
   SIGNAL Way2Hit           : std_logic;
   SIGNAL Way3Hit           : std_logic;
   SIGNAL Way4Hit           : std_logic;
   SIGNAL Way5Hit           : std_logic;
   SIGNAL Way6Hit           : std_logic;
   SIGNAL Way7Hit           : std_logic;
   SIGNAL WhichHit          : LC3B_C_SET;
   SIGNAL WhichWrite        : LC3B_C_SET;
   SIGNAL Write0            : STD_LOGIC;
   SIGNAL Write1            : STD_LOGIC;
   SIGNAL Write2            : STD_LOGIC;
   SIGNAL Write3            : STD_LOGIC;
   SIGNAL Write4            : STD_LOGIC;
   SIGNAL Write5            : STD_LOGIC;
   SIGNAL Write6            : STD_LOGIC;
   SIGNAL Write7            : STD_LOGIC;
   SIGNAL delayed           : std_logic;


   -- Component Declarations
   COMPONENT BitMux8
   PORT (
      Sel : IN     LC3B_C_SET ;
      x0  : IN     std_logic ;
      x1  : IN     std_logic ;
      x2  : IN     std_logic ;
      x3  : IN     std_logic ;
      x4  : IN     std_logic ;
      x5  : IN     std_logic ;
      x6  : IN     std_logic ;
      x7  : IN     std_logic ;
      F   : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT BitSplit
   PORT (
      x  : IN     LC3B_BYTE ;
      f0 : OUT    std_logic ;
      f1 : OUT    std_logic ;
      f2 : OUT    std_logic ;
      f3 : OUT    std_logic ;
      f4 : OUT    std_logic ;
      f5 : OUT    std_logic ;
      f6 : OUT    std_logic ;
      f7 : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT COMP8_3
   PORT (
      A : IN     LC3B_C_SET ;
      B : IN     LC3B_C_SET ;
      F : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT ClockDelay3
   PORT (
      A : IN     std_logic ;
      F : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT ENCODE8_3
   PORT (
      x0 : IN     std_logic ;
      x1 : IN     std_logic ;
      x2 : IN     std_logic ;
      x3 : IN     std_logic ;
      x4 : IN     std_logic ;
      x5 : IN     std_logic ;
      x6 : IN     std_logic ;
      x7 : IN     std_logic ;
      F  : OUT    LC3B_C_SET 
   );
   END COMPONENT;
   COMPONENT LRUReg0
   PORT (
      LRUReg0EN : IN     STD_LOGIC ;
      CLK       : IN     STD_LOGIC ;
      LRUOut    : OUT    LC3B_C_SET ;
      LRUReg0In : IN     LC3B_C_SET ;
      RESET_L   : IN     STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT LRUReg1
   PORT (
      LRUReg1EN : IN     STD_LOGIC ;
      LRUReg0In : OUT    LC3B_C_SET ;
      LRUReg1In : IN     LC3B_C_SET ;
      RESET_L   : IN     STD_LOGIC ;
      CLK       : IN     STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT LRUReg2
   PORT (
      LRUReg2EN : IN     STD_LOGIC ;
      LRUReg1In : OUT    LC3B_C_SET ;
      LRUReg2In : IN     LC3B_C_SET ;
      RESET_L   : IN     STD_LOGIC ;
      CLK       : IN     STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT LRUReg3
   PORT (
      LRUReg3EN : IN     STD_LOGIC ;
      LRUReg2In : OUT    LC3B_C_SET ;
      LRUReg3In : IN     LC3B_C_SET ;
      RESET_L   : IN     STD_LOGIC ;
      CLK       : IN     STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT LRUReg4
   PORT (
      LRUReg4EN : IN     STD_LOGIC ;
      LRUReg3In : OUT    LC3B_C_SET ;
      LRUReg4In : IN     LC3B_C_SET ;
      RESET_L   : IN     STD_LOGIC ;
      CLK       : IN     STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT LRUReg5
   PORT (
      LRUReg5EN : IN     STD_LOGIC ;
      LRUReg4In : OUT    LC3B_C_SET ;
      LRUReg5In : IN     LC3B_C_SET ;
      RESET_L   : IN     STD_LOGIC ;
      CLK       : IN     STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT LRUReg6
   PORT (
      LRUReg6EN : IN     STD_LOGIC ;
      LRUReg5In : OUT    LC3B_C_SET ;
      LRUReg6In : IN     LC3B_C_SET ;
      RESET_L   : IN     STD_LOGIC ;
      CLK       : IN     STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT LRUReg7
   PORT (
      LRUReg7In : IN     LC3B_C_SET ;
      LRUReg7EN : IN     STD_LOGIC ;
      LRUReg6In : OUT    LC3B_C_SET ;
      RESET_L   : IN     STD_LOGIC ;
      CLK       : IN     STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT MSB
   PORT (
      InputOffset : IN     LC3B_WORD ;
      OffsetMSB   : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT MUX8_3
   PORT (
      Sel : IN     LC3B_C_SET ;
      x0  : IN     LC3B_C_SET ;
      x1  : IN     LC3B_C_SET ;
      x2  : IN     LC3B_C_SET ;
      x3  : IN     LC3B_C_SET ;
      x4  : IN     LC3B_C_SET ;
      x5  : IN     LC3B_C_SET ;
      x6  : IN     LC3B_C_SET ;
      x7  : IN     LC3B_C_SET ;
      F   : OUT    LC3B_C_SET 
   );
   END COMPONENT;
   COMPONENT ValidWindow
   PORT (
      clk            : IN     std_logic;
      delayed        : IN     std_logic;
      ValidWindowout : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT WordMux8
   PORT (
      A      : IN     LC3B_word ;
      B      : IN     LC3B_word ;
      C      : IN     LC3B_word ;
      D      : IN     LC3B_word ;
      E      : IN     LC3B_word ;
      F      : IN     LC3B_word ;
      G      : IN     LC3B_word ;
      H      : IN     LC3B_word ;
      Sel    : IN     LC3B_8MUX_SEL ;
      Output : OUT    LC3B_word 
   );
   END COMPONENT;
   COMPONENT AND2
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT AND3
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      C : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT COMP16
   PORT (
      A : IN     LC3B_WORD ;
      B : IN     LC3B_WORD ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT DECODE3_8
   PORT (
      A : IN     STD_LOGIC_VECTOR (2 DOWNTO 0);
      F : OUT    LC3B_BYTE 
   );
   END COMPONENT;
   COMPONENT NOT1
   PORT (
      A : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT OR2
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT REG1
   PORT (
      RESET_L : IN     STD_LOGIC ;
      A       : IN     STD_LOGIC ;
      EN      : IN     STD_LOGIC ;
      CLK     : IN     STD_LOGIC ;
      F       : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT REG16
   PORT (
      RESET_L : IN     STD_LOGIC ;
      A       : IN     STD_LOGIC_VECTOR (15 DOWNTO 0);
      EN      : IN     STD_LOGIC ;
      CLK     : IN     STD_LOGIC ;
      F       : OUT    STD_LOGIC_VECTOR (15 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : AND2 USE ENTITY mp3lib.AND2;
   FOR ALL : AND3 USE ENTITY mp3lib.AND3;
   FOR ALL : BitMux8 USE ENTITY ece411.BitMux8;
   FOR ALL : BitSplit USE ENTITY ece411.BitSplit;
   FOR ALL : COMP16 USE ENTITY mp3lib.COMP16;
   FOR ALL : COMP8_3 USE ENTITY ece411.COMP8_3;
   FOR ALL : ClockDelay3 USE ENTITY ece411.ClockDelay3;
   FOR ALL : DECODE3_8 USE ENTITY mp3lib.DECODE3_8;
   FOR ALL : ENCODE8_3 USE ENTITY ece411.ENCODE8_3;
   FOR ALL : LRUReg0 USE ENTITY ece411.LRUReg0;
   FOR ALL : LRUReg1 USE ENTITY ece411.LRUReg1;
   FOR ALL : LRUReg2 USE ENTITY ece411.LRUReg2;
   FOR ALL : LRUReg3 USE ENTITY ece411.LRUReg3;
   FOR ALL : LRUReg4 USE ENTITY ece411.LRUReg4;
   FOR ALL : LRUReg5 USE ENTITY ece411.LRUReg5;
   FOR ALL : LRUReg6 USE ENTITY ece411.LRUReg6;
   FOR ALL : LRUReg7 USE ENTITY ece411.LRUReg7;
   FOR ALL : MSB USE ENTITY ece411.MSB;
   FOR ALL : MUX8_3 USE ENTITY ece411.MUX8_3;
   FOR ALL : NOT1 USE ENTITY mp3lib.NOT1;
   FOR ALL : OR2 USE ENTITY mp3lib.OR2;
   FOR ALL : REG1 USE ENTITY mp3lib.REG1;
   FOR ALL : REG16 USE ENTITY mp3lib.REG16;
   FOR ALL : ValidWindow USE ENTITY ece411.ValidWindow;
   FOR ALL : WordMux8 USE ENTITY ece411.WordMux8;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   U_1 : BitMux8
      PORT MAP (
         Sel => WhichHit,
         x0  => F57,
         x1  => F58,
         x2  => F59,
         x3  => F61,
         x4  => F62,
         x5  => F63,
         x6  => F64,
         x7  => F65,
         F   => F66
      );
   U_85 : BitMux8
      PORT MAP (
         Sel => WhichHit,
         x0  => Unconditional0Out,
         x1  => Unconditional1Out,
         x2  => Unconditional2Out,
         x3  => Unconditional3Out,
         x4  => Unconditional4Out,
         x5  => Unconditional5Out,
         x6  => Unconditional6Out,
         x7  => Unconditional7Out,
         F   => F68
      );
   BytetoBits : BitSplit
      PORT MAP (
         x  => Decode_LRUOut,
         f0 => LRU0,
         f1 => LRU1,
         f2 => LRU2,
         f3 => LRU3,
         f4 => LRU4,
         f5 => LRU5,
         f6 => LRU6,
         f7 => LRU7
      );
   Reg0ToBack : COMP8_3
      PORT MAP (
         A => LRUOut,
         B => WhichWrite,
         F => MRU0
      );
   Reg1ToBack : COMP8_3
      PORT MAP (
         A => LRUReg0In,
         B => WhichWrite,
         F => MRU1
      );
   Reg2ToBack : COMP8_3
      PORT MAP (
         A => LRUReg1In,
         B => WhichWrite,
         F => MRU2
      );
   Reg3ToBack : COMP8_3
      PORT MAP (
         A => LRUReg2In,
         B => WhichWrite,
         F => MRU3
      );
   Reg4ToBack : COMP8_3
      PORT MAP (
         A => LRUReg3In,
         B => WhichWrite,
         F => MRU4
      );
   Reg5ToBack : COMP8_3
      PORT MAP (
         A => LRUReg4In,
         B => WhichWrite,
         F => MRU5
      );
   Reg6ToBack : COMP8_3
      PORT MAP (
         A => LRUReg5In,
         B => WhichWrite,
         F => MRU6
      );
   Reg7ToBack : COMP8_3
      PORT MAP (
         A => LRUReg6In,
         B => WhichWrite,
         F => MRU7
      );
   Delay26ns : ClockDelay3
      PORT MAP (
         A => CLK,
         F => delayed
      );
   MRUSel : ENCODE8_3
      PORT MAP (
         x0 => MRU0,
         x1 => MRU1,
         x2 => MRU2,
         x3 => MRU3,
         x4 => MRU4,
         x5 => MRU5,
         x6 => MRU6,
         x7 => MRU7,
         F  => MRUSelOut
      );
   WayHitEncode : ENCODE8_3
      PORT MAP (
         x0 => Way0Hit,
         x1 => Way1Hit,
         x2 => Way2Hit,
         x3 => Way3Hit,
         x4 => Way4Hit,
         x5 => Way5Hit,
         x6 => Way6Hit,
         x7 => Way7Hit,
         F  => WhichHit
      );
   WriteEncode : ENCODE8_3
      PORT MAP (
         x0 => Write0,
         x1 => Write1,
         x2 => Write2,
         x3 => Write3,
         x4 => Write4,
         x5 => Write5,
         x6 => Write6,
         x7 => Write7,
         F  => WhichWrite
      );
   aLRUReg0 : LRUReg0
      PORT MAP (
         LRUReg0EN => LRUReg0EN,
         CLK       => CLK,
         LRUOut    => LRUOut,
         LRUReg0In => LRUReg0In,
         RESET_L   => RESET_L
      );
   aLRUReg1 : LRUReg1
      PORT MAP (
         LRUReg1EN => LRUReg1EN,
         LRUReg0In => LRUReg0In,
         LRUReg1In => LRUReg1In,
         RESET_L   => RESET_L,
         CLK       => CLK
      );
   aLRUReg2 : LRUReg2
      PORT MAP (
         LRUReg2EN => LRUReg2EN,
         LRUReg1In => LRUReg1In,
         LRUReg2In => LRUReg2In,
         RESET_L   => RESET_L,
         CLK       => CLK
      );
   aLRUReg3 : LRUReg3
      PORT MAP (
         LRUReg3EN => LRUReg3EN,
         LRUReg2In => LRUReg2In,
         LRUReg3In => LRUReg3In,
         RESET_L   => RESET_L,
         CLK       => CLK
      );
   aLRUReg4 : LRUReg4
      PORT MAP (
         LRUReg4EN => LRUReg4EN,
         LRUReg3In => LRUReg3In,
         LRUReg4In => LRUReg4In,
         RESET_L   => RESET_L,
         CLK       => CLK
      );
   aLRUReg5 : LRUReg5
      PORT MAP (
         LRUReg5EN => LRUReg5EN,
         LRUReg4In => LRUReg4In,
         LRUReg5In => LRUReg5In,
         RESET_L   => RESET_L,
         CLK       => CLK
      );
   aLRUReg6 : LRUReg6
      PORT MAP (
         LRUReg6EN => LRUReg6EN,
         LRUReg5In => LRUReg5In,
         LRUReg6In => LRUReg6In,
         RESET_L   => RESET_L,
         CLK       => CLK
      );
   aLRUReg7 : LRUReg7
      PORT MAP (
         LRUReg7In => LRUReg7In,
         LRUReg7EN => LRUReg7EN,
         LRUReg6In => LRUReg6In,
         RESET_L   => RESET_L,
         CLK       => CLK
      );
   aMSB : MSB
      PORT MAP (
         InputOffset => InputOffset,
         OffsetMSB   => OffsetMSB
      );
   MRUMux : MUX8_3
      PORT MAP (
         Sel => MRUSelOut,
         x0  => LRUOut,
         x1  => LRUReg0In,
         x2  => LRUReg1In,
         x3  => LRUReg2In,
         x4  => LRUReg3In,
         x5  => LRUReg4In,
         x6  => LRUReg5In,
         x7  => LRUReg6In,
         F   => LRUReg7In
      );
   aValidWindow : ValidWindow
      PORT MAP (
         clk            => CLK,
         delayed        => delayed,
         ValidWindowout => ValidWindowout
      );
   U_0 : WordMux8
      PORT MAP (
         A      => DataOut0,
         B      => DataOut1,
         C      => DataOut2,
         D      => DataOut3,
         E      => DataOut4,
         F      => DataOut5,
         G      => DataOut6,
         H      => DataOut7,
         Sel    => WhichHit,
         Output => PredictedDest
      );
   InHit0 : AND2
      PORT MAP (
         A => MRU0,
         B => F22,
         F => LRUReg0EN
      );
   InHit1 : AND2
      PORT MAP (
         A => B324,
         B => F22,
         F => LRUReg1EN
      );
   InHit2 : AND2
      PORT MAP (
         A => Move1ToBack1,
         B => F22,
         F => LRUReg2EN
      );
   InHit3 : AND2
      PORT MAP (
         A => Move1ToBack2,
         B => F22,
         F => LRUReg3EN
      );
   InHit4 : AND2
      PORT MAP (
         A => Move1ToBack3,
         B => F22,
         F => LRUReg4EN
      );
   InHit5 : AND2
      PORT MAP (
         A => Move1ToBack4,
         B => F22,
         F => LRUReg5EN
      );
   InHit6 : AND2
      PORT MAP (
         A => Move1ToBack5,
         B => F22,
         F => LRUReg6EN
      );
   InHit7 : AND2
      PORT MAP (
         A => Move1ToBack6,
         B => F22,
         F => LRUReg7EN
      );
   U_2 : AND2
      PORT MAP (
         A => EN_Delay,
         B => F5,
         F => Write0
      );
   U_5 : AND2
      PORT MAP (
         A => F,
         B => F2,
         F => F3
      );
   U_6 : AND2
      PORT MAP (
         A => Hit,
         B => Hit,
         F => F
      );
   U_7 : AND2
      PORT MAP (
         A => Way0Hit,
         B => Way0Hit,
         F => F2
      );
   U_8 : AND2
      PORT MAP (
         A => LRU0,
         B => LRU0,
         F => A
      );
   U_9 : AND2
      PORT MAP (
         A => A,
         B => B,
         F => F4
      );
   U_10 : AND2
      PORT MAP (
         A => Way1Hit,
         B => Way1Hit,
         F => F21
      );
   U_11 : AND2
      PORT MAP (
         A => LRU1,
         B => LRU1,
         F => A3
      );
   U_12 : AND2
      PORT MAP (
         A => Hit,
         B => Hit,
         F => F19
      );
   U_14 : AND2
      PORT MAP (
         A => A3,
         B => B1,
         F => F20
      );
   U_15 : AND2
      PORT MAP (
         A => F19,
         B => F21,
         F => F16
      );
   U_18 : AND2
      PORT MAP (
         A => EN_Delay,
         B => F15,
         F => Write1
      );
   U_19 : AND2
      PORT MAP (
         A => Way2Hit,
         B => Way2Hit,
         F => F26
      );
   U_20 : AND2
      PORT MAP (
         A => LRU2,
         B => LRU2,
         F => A4
      );
   U_21 : AND2
      PORT MAP (
         A => ValidWindowout,
         B => PredictHit,
         F => Hit
      );
   U_22 : AND2
      PORT MAP (
         A => Hit,
         B => Hit,
         F => F24
      );
   U_24 : AND2
      PORT MAP (
         A => A4,
         B => B2,
         F => F25
      );
   U_25 : AND2
      PORT MAP (
         A => F24,
         B => F26,
         F => F23
      );
   U_27 : AND2
      PORT MAP (
         A => EN_Delay,
         B => F22,
         F => Write2
      );
   U_28 : AND2
      PORT MAP (
         A => Way3Hit,
         B => Way3Hit,
         F => F31
      );
   U_32 : AND2
      PORT MAP (
         A => LRU3,
         B => LRU3,
         F => A5
      );
   U_35 : AND2
      PORT MAP (
         A => Hit,
         B => Hit,
         F => F29
      );
   U_37 : AND2
      PORT MAP (
         A => A5,
         B => B3,
         F => F30
      );
   U_38 : AND2
      PORT MAP (
         A => F29,
         B => F31,
         F => F28
      );
   U_40 : AND2
      PORT MAP (
         A => EN_Delay,
         B => F27,
         F => Write3
      );
   U_41 : AND2
      PORT MAP (
         A => Way4Hit,
         B => Way4Hit,
         F => F36
      );
   U_42 : AND2
      PORT MAP (
         A => LRU4,
         B => LRU4,
         F => A6
      );
   U_43 : AND2
      PORT MAP (
         A => Hit,
         B => Hit,
         F => F34
      );
   U_45 : AND2
      PORT MAP (
         A => A6,
         B => B4,
         F => F35
      );
   U_46 : AND2
      PORT MAP (
         A => F34,
         B => F36,
         F => F33
      );
   U_48 : AND2
      PORT MAP (
         A => EN_Delay,
         B => F32,
         F => Write4
      );
   U_49 : AND2
      PORT MAP (
         A => Way5Hit,
         B => Way5Hit,
         F => F41
      );
   U_50 : AND2
      PORT MAP (
         A => LRU5,
         B => LRU5,
         F => A7
      );
   U_51 : AND2
      PORT MAP (
         A => Hit,
         B => Hit,
         F => F39
      );
   U_53 : AND2
      PORT MAP (
         A => A7,
         B => B5,
         F => F40
      );
   U_54 : AND2
      PORT MAP (
         A => F39,
         B => F41,
         F => F38
      );
   U_56 : AND2
      PORT MAP (
         A => EN_Delay,
         B => F37,
         F => Write5
      );
   U_57 : AND2
      PORT MAP (
         A => Way6Hit,
         B => Way6Hit,
         F => F46
      );
   U_58 : AND2
      PORT MAP (
         A => LRU6,
         B => LRU6,
         F => A8
      );
   U_59 : AND2
      PORT MAP (
         A => Hit,
         B => Hit,
         F => F44
      );
   U_61 : AND2
      PORT MAP (
         A => A8,
         B => B6,
         F => F45
      );
   U_62 : AND2
      PORT MAP (
         A => F44,
         B => F46,
         F => F43
      );
   U_64 : AND2
      PORT MAP (
         A => EN_Delay,
         B => F42,
         F => Write6
      );
   U_65 : AND2
      PORT MAP (
         A => Way7Hit,
         B => Way7Hit,
         F => F51
      );
   U_66 : AND2
      PORT MAP (
         A => LRU7,
         B => LRU7,
         F => A9
      );
   U_67 : AND2
      PORT MAP (
         A => Hit,
         B => Hit,
         F => F49
      );
   U_69 : AND2
      PORT MAP (
         A => A9,
         B => B7,
         F => F50
      );
   U_70 : AND2
      PORT MAP (
         A => F49,
         B => F51,
         F => F48
      );
   U_74 : AND2
      PORT MAP (
         A => EN_Delay,
         B => F47,
         F => Write7
      );
   U_76 : AND2
      PORT MAP (
         A => F60,
         B => F60,
         F => EN_Delay
      );
   U_84 : AND2
      PORT MAP (
         A => Hit,
         B => F67,
         F => TakeBranch
      );
   U_75 : AND3
      PORT MAP (
         A => EN,
         B => EN,
         C => EN,
         F => F60
      );
   PCComp0 : COMP16
      PORT MAP (
         A => F1,
         B => BR_ADDRESS,
         F => Way0Hit
      );
   PCComp1 : COMP16
      PORT MAP (
         A => F6,
         B => BR_ADDRESS,
         F => Way1Hit
      );
   PCComp2 : COMP16
      PORT MAP (
         A => F7,
         B => BR_ADDRESS,
         F => Way2Hit
      );
   PCComp3 : COMP16
      PORT MAP (
         A => F8,
         B => BR_ADDRESS,
         F => Way3Hit
      );
   PCComp4 : COMP16
      PORT MAP (
         A => F9,
         B => BR_ADDRESS,
         F => Way4Hit
      );
   PCComp5 : COMP16
      PORT MAP (
         A => F10,
         B => BR_ADDRESS,
         F => Way5Hit
      );
   PCComp6 : COMP16
      PORT MAP (
         A => F11,
         B => BR_ADDRESS,
         F => Way6Hit
      );
   PCComp7 : COMP16
      PORT MAP (
         A => F13,
         B => BR_ADDRESS,
         F => Way7Hit
      );
   U_29 : DECODE3_8
      PORT MAP (
         A => LRUOut,
         F => Decode_LRUOut
      );
   U_4 : NOT1
      PORT MAP (
         A => Hit,
         F => B
      );
   U_13 : NOT1
      PORT MAP (
         A => Hit,
         F => B1
      );
   U_23 : NOT1
      PORT MAP (
         A => Hit,
         F => B2
      );
   U_36 : NOT1
      PORT MAP (
         A => Hit,
         F => B3
      );
   U_44 : NOT1
      PORT MAP (
         A => Hit,
         F => B4
      );
   U_52 : NOT1
      PORT MAP (
         A => Hit,
         F => B5
      );
   U_60 : NOT1
      PORT MAP (
         A => Hit,
         F => B6
      );
   U_68 : NOT1
      PORT MAP (
         A => Hit,
         F => B7
      );
   Move1 : OR2
      PORT MAP (
         A => MRU1,
         B => MRU0,
         F => B324
      );
   Move2 : OR2
      PORT MAP (
         A => MRU2,
         B => B324,
         F => Move1ToBack1
      );
   Move3 : OR2
      PORT MAP (
         A => MRU3,
         B => Move1ToBack1,
         F => Move1ToBack2
      );
   Move4 : OR2
      PORT MAP (
         A => MRU4,
         B => Move1ToBack2,
         F => Move1ToBack3
      );
   Move5 : OR2
      PORT MAP (
         A => MRU5,
         B => Move1ToBack3,
         F => Move1ToBack4
      );
   Move6 : OR2
      PORT MAP (
         A => MRU6,
         B => Move1ToBack4,
         F => Move1ToBack5
      );
   Move7 : OR2
      PORT MAP (
         A => MRU7,
         B => Move1ToBack5,
         F => Move1ToBack6
      );
   U_3 : OR2
      PORT MAP (
         A => F4,
         B => F3,
         F => F5
      );
   U_16 : OR2
      PORT MAP (
         A => A2,
         B => F18,
         F => PredictHit
      );
   U_17 : OR2
      PORT MAP (
         A => F20,
         B => F16,
         F => F15
      );
   U_26 : OR2
      PORT MAP (
         A => F25,
         B => F23,
         F => F22
      );
   U_30 : OR2
      PORT MAP (
         A => Way1Hit,
         B => Way0Hit,
         F => F14
      );
   U_31 : OR2
      PORT MAP (
         A => Way3Hit,
         B => Way2Hit,
         F => F17
      );
   U_33 : OR2
      PORT MAP (
         A => Way5Hit,
         B => Way4Hit,
         F => F12
      );
   U_34 : OR2
      PORT MAP (
         A => Way7Hit,
         B => Way6Hit,
         F => A1
      );
   U_39 : OR2
      PORT MAP (
         A => F30,
         B => F28,
         F => F27
      );
   U_47 : OR2
      PORT MAP (
         A => F35,
         B => F33,
         F => F32
      );
   U_55 : OR2
      PORT MAP (
         A => F40,
         B => F38,
         F => F37
      );
   U_63 : OR2
      PORT MAP (
         A => F45,
         B => F43,
         F => F42
      );
   U_71 : OR2
      PORT MAP (
         A => F17,
         B => F14,
         F => F18
      );
   U_72 : OR2
      PORT MAP (
         A => A1,
         B => F12,
         F => A2
      );
   U_73 : OR2
      PORT MAP (
         A => F50,
         B => F48,
         F => F47
      );
   U_77 : OR2
      PORT MAP (
         A => A10,
         B => F56,
         F => F22
      );
   U_78 : OR2
      PORT MAP (
         A => F52,
         B => F53,
         F => A10
      );
   U_79 : OR2
      PORT MAP (
         A => F54,
         B => F55,
         F => F56
      );
   U_80 : OR2
      PORT MAP (
         A => Write0,
         B => Write1,
         F => F52
      );
   U_81 : OR2
      PORT MAP (
         A => Write2,
         B => Write3,
         F => F53
      );
   U_82 : OR2
      PORT MAP (
         A => Write4,
         B => Write5,
         F => F54
      );
   U_83 : OR2
      PORT MAP (
         A => Write6,
         B => Write7,
         F => F55
      );
   U_86 : OR2
      PORT MAP (
         A => F68,
         B => F66,
         F => F67
      );
   Predict0 : REG1
      PORT MAP (
         RESET_L => RESET_L,
         A       => OffsetMSB,
         EN      => Write0,
         CLK     => CLK,
         F       => F57
      );
   Predict1 : REG1
      PORT MAP (
         RESET_L => RESET_L,
         A       => OffsetMSB,
         EN      => Write1,
         CLK     => CLK,
         F       => F58
      );
   Predict2 : REG1
      PORT MAP (
         RESET_L => RESET_L,
         A       => OffsetMSB,
         EN      => Write2,
         CLK     => CLK,
         F       => F59
      );
   Predict3 : REG1
      PORT MAP (
         RESET_L => RESET_L,
         A       => OffsetMSB,
         EN      => Write3,
         CLK     => CLK,
         F       => F61
      );
   Predict4 : REG1
      PORT MAP (
         RESET_L => RESET_L,
         A       => OffsetMSB,
         EN      => Write4,
         CLK     => CLK,
         F       => F62
      );
   Predict5 : REG1
      PORT MAP (
         RESET_L => RESET_L,
         A       => OffsetMSB,
         EN      => Write5,
         CLK     => CLK,
         F       => F63
      );
   Predict6 : REG1
      PORT MAP (
         RESET_L => RESET_L,
         A       => OffsetMSB,
         EN      => Write6,
         CLK     => CLK,
         F       => F64
      );
   Predict7 : REG1
      PORT MAP (
         RESET_L => RESET_L,
         A       => OffsetMSB,
         EN      => Write7,
         CLK     => CLK,
         F       => F65
      );
   Unconditional0 : REG1
      PORT MAP (
         RESET_L => RESET_L,
         A       => InputUnconditional,
         EN      => Write0,
         CLK     => CLK,
         F       => Unconditional0Out
      );
   Unconditional1 : REG1
      PORT MAP (
         RESET_L => RESET_L,
         A       => InputUnconditional,
         EN      => Write1,
         CLK     => CLK,
         F       => Unconditional1Out
      );
   Unconditional2 : REG1
      PORT MAP (
         RESET_L => RESET_L,
         A       => InputUnconditional,
         EN      => Write2,
         CLK     => CLK,
         F       => Unconditional2Out
      );
   Unconditional3 : REG1
      PORT MAP (
         RESET_L => RESET_L,
         A       => InputUnconditional,
         EN      => Write3,
         CLK     => CLK,
         F       => Unconditional3Out
      );
   Unconditional4 : REG1
      PORT MAP (
         RESET_L => RESET_L,
         A       => InputUnconditional,
         EN      => Write4,
         CLK     => CLK,
         F       => Unconditional4Out
      );
   Unconditional5 : REG1
      PORT MAP (
         RESET_L => RESET_L,
         A       => InputUnconditional,
         EN      => Write5,
         CLK     => CLK,
         F       => Unconditional5Out
      );
   Unconditional6 : REG1
      PORT MAP (
         RESET_L => RESET_L,
         A       => InputUnconditional,
         EN      => Write6,
         CLK     => CLK,
         F       => Unconditional6Out
      );
   Unconditional7 : REG1
      PORT MAP (
         RESET_L => RESET_L,
         A       => InputUnconditional,
         EN      => Write7,
         CLK     => CLK,
         F       => Unconditional7Out
      );
   PCLookup0 : REG16
      PORT MAP (
         RESET_L => RESET_L,
         A       => Input_BR_ADDRESS,
         EN      => Write0,
         CLK     => CLK,
         F       => F1
      );
   PCLookup1 : REG16
      PORT MAP (
         RESET_L => RESET_L,
         A       => Input_BR_ADDRESS,
         EN      => Write1,
         CLK     => CLK,
         F       => F6
      );
   PCLookup2 : REG16
      PORT MAP (
         RESET_L => RESET_L,
         A       => Input_BR_ADDRESS,
         EN      => Write2,
         CLK     => CLK,
         F       => F7
      );
   PCLookup3 : REG16
      PORT MAP (
         RESET_L => RESET_L,
         A       => Input_BR_ADDRESS,
         EN      => Write3,
         CLK     => CLK,
         F       => F8
      );
   PCLookup4 : REG16
      PORT MAP (
         RESET_L => RESET_L,
         A       => Input_BR_ADDRESS,
         EN      => Write4,
         CLK     => CLK,
         F       => F9
      );
   PCLookup5 : REG16
      PORT MAP (
         RESET_L => RESET_L,
         A       => Input_BR_ADDRESS,
         EN      => Write5,
         CLK     => CLK,
         F       => F10
      );
   PCLookup6 : REG16
      PORT MAP (
         RESET_L => RESET_L,
         A       => Input_BR_ADDRESS,
         EN      => Write6,
         CLK     => CLK,
         F       => F11
      );
   PCLookup7 : REG16
      PORT MAP (
         RESET_L => RESET_L,
         A       => Input_BR_ADDRESS,
         EN      => Write7,
         CLK     => CLK,
         F       => F13
      );
   PCPredict0 : REG16
      PORT MAP (
         RESET_L => RESET_L,
         A       => InputDest,
         EN      => Write0,
         CLK     => CLK,
         F       => DataOut0
      );
   PCPredict1 : REG16
      PORT MAP (
         RESET_L => RESET_L,
         A       => InputDest,
         EN      => Write1,
         CLK     => CLK,
         F       => DataOut1
      );
   PCPredict2 : REG16
      PORT MAP (
         RESET_L => RESET_L,
         A       => InputDest,
         EN      => Write2,
         CLK     => CLK,
         F       => DataOut2
      );
   PCPredict3 : REG16
      PORT MAP (
         RESET_L => RESET_L,
         A       => InputDest,
         EN      => Write3,
         CLK     => CLK,
         F       => DataOut3
      );
   PCPredict4 : REG16
      PORT MAP (
         RESET_L => RESET_L,
         A       => InputDest,
         EN      => Write4,
         CLK     => CLK,
         F       => DataOut4
      );
   PCPredict5 : REG16
      PORT MAP (
         RESET_L => RESET_L,
         A       => InputDest,
         EN      => Write5,
         CLK     => CLK,
         F       => DataOut5
      );
   PCPredict6 : REG16
      PORT MAP (
         RESET_L => RESET_L,
         A       => InputDest,
         EN      => Write6,
         CLK     => CLK,
         F       => DataOut6
      );
   PCPredict7 : REG16
      PORT MAP (
         RESET_L => RESET_L,
         A       => InputDest,
         EN      => Write7,
         CLK     => CLK,
         F       => DataOut7
      );

END struct;
