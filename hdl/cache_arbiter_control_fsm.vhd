-- VHDL Entity ece411.Cache_Arbiter_Control.symbol
--
-- Created:
--          by - li151.ews (gelib-057-06.ews.illinois.edu)
--          at - 13:46:29 12/06/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Cache_Arbiter_Control IS
   PORT( 
      AccessD    : IN     std_logic;
      AccessI    : IN     std_logic;
      D_PMRESP_H : IN     std_logic;
      I_PMRESP_H : IN     std_logic;
      clk        : IN     std_logic;
      rst        : IN     std_logic;
      Sel        : OUT    std_logic
   );

-- Declarations

END Cache_Arbiter_Control ;

--
-- VHDL Architecture ece411.Cache_Arbiter_Control.fsm
--
-- Created:
--          by - li151.ews (gelib-057-06.ews.illinois.edu)
--          at - 13:46:29 12/06/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;
 
ARCHITECTURE fsm OF Cache_Arbiter_Control IS

   TYPE STATE_TYPE IS (
      S,
      IAccess,
      DAccess
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      rst
   )
   -----------------------------------------------------------------
   BEGIN
      IF (rst = '0') THEN
         current_state <= S;
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      AccessD,
      AccessI,
      D_PMRESP_H,
      I_PMRESP_H,
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN S => 
            IF (AccessI = '1' AND AccessD = '0') THEN 
               next_state <= IAccess;
            ELSIF (AccessD = '1') THEN 
               next_state <= DAccess;
            ELSE
               next_state <= S;
            END IF;
         WHEN IAccess => 
            IF (I_PMRESP_H = '1') THEN 
               next_state <= S;
            ELSE
               next_state <= IAccess;
            END IF;
         WHEN DAccess => 
            IF (D_PMRESP_H = '1') THEN 
               next_state <= S;
            ELSE
               next_state <= DAccess;
            END IF;
         WHEN OTHERS =>
            next_state <= S;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      Sel <= '0';

      -- Combined Actions
      CASE current_state IS
         WHEN IAccess => 
            Sel <= '0';
         WHEN DAccess => 
            Sel <= '1';
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;
