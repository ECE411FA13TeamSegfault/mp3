-- VHDL Entity ece411.Datapath.interface
--
-- Created:
--          by - chng2.ews (linux-a1.ews.illinois.edu)
--          at - 01:22:03 10/31/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Datapath IS
   PORT( 
      RESET_L : IN     std_logic;
      start_h : IN     std_logic
   );

-- Declarations

END Datapath ;

--
-- VHDL Architecture ece411.Datapath.struct
--
-- Created:
--          by - chng2.ews (linux-a1.ews.illinois.edu)
--          at - 01:22:04 10/31/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;
USE ieee.std_logic_arith.all;

LIBRARY mp3lib;

ARCHITECTURE struct OF Datapath IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL A2                : STD_LOGIC;
   SIGNAL ADDR1Muxsel1      : std_logic;
   SIGNAL ADDR2Muxsel1      : LC3B_4MUX_SEL;
   SIGNAL ALUMuxsel1        : LC3B_4MUX_SEL;
   SIGNAL ALUop1            : LC3B_ALUOP;
   SIGNAL B                 : STD_LOGIC;
   SIGNAL CONTROL           : CONTROL_WORD;
   SIGNAL CheckN            : std_logic;
   SIGNAL CheckP            : std_logic;
   SIGNAL CheckZ            : std_logic;
   SIGNAL DRMuxsel1         : std_logic;
   SIGNAL D_DATAIN          : LC3B_WORD;
   SIGNAL D_MRESP_H         : STD_LOGIC;
   SIGNAL EX_ADJ8out        : LC3b_word;
   SIGNAL EX_ALU            : LC3b_word;
   SIGNAL EX_ALUOUT         : LC3b_word;
   SIGNAL EX_BRAdd          : LC3b_word;
   SIGNAL EX_BRAddout       : LC3b_word;
   SIGNAL EX_CONTROL_OUT    : CONTROL_WORD;
   SIGNAL EX_PCPlus2        : LC3b_word;
   SIGNAL EX_dest           : LC3b_reg;
   SIGNAL F                 : STD_LOGIC;
   SIGNAL GenCCMuxsel1      : std_logic;
   SIGNAL ID_ADJ11out       : LC3b_word;
   SIGNAL ID_ADJ6out        : LC3b_word;
   SIGNAL ID_ADJ8out        : LC3b_word;
   SIGNAL ID_ADJ9out        : LC3b_word;
   SIGNAL ID_CONTROL_OUT    : CONTROL_WORD;
   SIGNAL ID_IMM5out        : LC3b_word;
   SIGNAL ID_PCPlus2        : LC3b_word;
   SIGNAL ID_RFA            : LC3b_word;
   SIGNAL ID_RFAout         : LC3b_word;
   SIGNAL ID_RFB            : LC3b_word;
   SIGNAL ID_RFBout         : LC3b_word;
   SIGNAL ID_SEXT6out       : LC3b_word;
   SIGNAL ID_dest           : LC3b_reg;
   SIGNAL IF_ADJ11out       : LC3b_word;
   SIGNAL IF_ADJ6out        : LC3b_word;
   SIGNAL IF_ADJ8out        : LC3b_word;
   SIGNAL IF_ADJ9out        : LC3b_word;
   SIGNAL IF_CONTROL_OUT    : CONTROL_WORD;
   SIGNAL IF_IMM5           : LC3B_IMM5;
   SIGNAL IF_IMM5out        : LC3b_word;
   SIGNAL IF_INDEX6         : LC3B_INDEX6;
   SIGNAL IF_IR             : LC3b_word;
   SIGNAL IF_IR11           : std_logic;
   SIGNAL IF_IR4            : std_logic;
   SIGNAL IF_IR5            : std_logic;
   SIGNAL IF_OFFSET11       : LC3B_OFFSET11;
   SIGNAL IF_OFFSET9        : LC3B_OFFSET9;
   SIGNAL IF_PCPlus2        : LC3b_word;
   SIGNAL IF_PCPlus2out     : LC3b_word;
   SIGNAL IF_SEXT6out       : LC3b_word;
   SIGNAL IF_SrcA           : LC3b_reg;
   SIGNAL IF_SrcB           : LC3b_reg;
   SIGNAL IF_TRAPVECT8      : LC3b_TRAPVECT8;
   SIGNAL IF_dest           : LC3b_reg;
   SIGNAL IF_opcode         : LC3b_opcode;
   SIGNAL I_ADDRESS         : LC3B_WORD;
   SIGNAL I_DATAIN          : LC3B_WORD;
   SIGNAL I_MRESP_H         : STD_LOGIC;
   SIGNAL Load              : std_logic;
   SIGNAL Load2             : std_logic;
   SIGNAL LoadNZP1          : std_logic;
   SIGNAL MARMuxsel1        : LC3B_4MUX_SEL;
   SIGNAL MDRMuxsel1        : LC3B_4MUX_SEL;
   SIGNAL MEM_ALU           : LC3b_word;
   SIGNAL MEM_BRAdd         : LC3b_word;
   SIGNAL MEM_CONTROL_OUT   : CONTROL_WORD;
   SIGNAL MEM_MARout        : LC3b_word;
   SIGNAL MEM_MDR           : LC3b_word;
   SIGNAL MEM_MDRout        : LC3b_word;
   SIGNAL MEM_PCPlus2       : LC3b_word;
   SIGNAL MEM_dest          : LC3b_reg;
   SIGNAL MREAD_L           : std_logic;
   SIGNAL MWRITE_L          : std_logic;
   SIGNAL PCMuxsel1         : LC3B_4MUX_SEL;
   SIGNAL RFMux2sel1        : LC3B_4MUX_SEL;
   SIGNAL RFMuxsel1         : LC3B_4MUX_SEL;
   SIGNAL Read_H            : std_logic;
   SIGNAL RegWrite1         : std_logic;
   SIGNAL StoreMuxsel1      : std_logic;
   SIGNAL WB_RFMuxout       : LC3b_word;
   SIGNAL WB_WriteRegisters : std_logic;
   SIGNAL Write_H           : std_logic;
   SIGNAL clk               : std_logic;
   SIGNAL n                 : std_logic;
   SIGNAL p                 : std_logic;
   SIGNAL preLoad           : std_logic;
   SIGNAL takeBr            : std_logic;
   SIGNAL test              : STD_LOGIC;
   SIGNAL z                 : std_logic;


   -- Component Declarations
   COMPONENT ADJ_SEXT_Unit
   PORT (
      IF_IMM5      : IN     LC3b_imm5 ;
      IF_INDEX6    : IN     LC3b_index6 ;
      IF_OFFSET11  : IN     LC3b_offset11 ;
      IF_OFFSET9   : IN     LC3b_offset9 ;
      IF_TRAPVECT8 : IN     LC3b_trapvect8 ;
      clk          : IN     std_logic ;
      IF_ADJ11out  : OUT    LC3b_word ;
      IF_ADJ6out   : OUT    LC3b_word ;
      IF_ADJ8out   : OUT    LC3b_word ;
      IF_ADJ9out   : OUT    LC3b_word ;
      IF_IMM5out   : OUT    LC3b_word ;
      IF_SEXT6out  : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT CLKgen
   PORT (
      clk : INOUT  std_logic  := '0'
   );
   END COMPONENT;
   COMPONENT Control_ROM
   PORT (
      IR11    : IN     std_logic;
      IR4     : IN     std_logic;
      IR5     : IN     std_logic;
      clk     : IN     std_logic;
      opcode  : IN     LC3b_OPCODE;
      start_h : IN     std_logic;
      takeBr  : IN     std_logic;
      CONTROL : OUT    CONTROL_WORD
   );
   END COMPONENT;
   COMPONENT DRAM16_DP
   PORT (
      CLK         : IN     STD_LOGIC;
      D_ADDRESS   : IN     LC3B_WORD;
      D_DATAOUT   : IN     LC3B_WORD;
      D_MREAD_L   : IN     STD_LOGIC;
      D_MWRITEH_L : IN     STD_LOGIC;
      D_MWRITEL_L : IN     STD_LOGIC;
      I_ADDRESS   : IN     LC3B_WORD;
      I_MREAD_L   : IN     STD_LOGIC;
      RESET_L     : IN     STD_LOGIC;
      D_DATAIN    : OUT    LC3B_WORD;
      D_MRESP_H   : OUT    STD_LOGIC;
      I_DATAIN    : OUT    LC3B_WORD;
      I_MRESP_H   : OUT    STD_LOGIC
   );
   END COMPONENT;
   COMPONENT Reg_EX_MEM
   PORT (
      EX_ALUout      : IN     LC3b_word;
      EX_BRAddout    : IN     LC3b_word;
      EX_CONTROL_IN  : IN     CONTROL_WORD;
      ID_ADJ8out     : IN     LC3b_word;
      ID_PCPlus2     : IN     LC3b_word;
      ID_dest        : IN     LC3b_reg;
      Load           : IN     std_logic;
      Reset_L        : IN     std_logic;
      clk            : IN     std_logic;
      EX_ADJ8out     : OUT    LC3b_word;
      EX_ALU         : OUT    LC3b_word;
      EX_BRAdd       : OUT    LC3b_word;
      EX_CONTROL_OUT : OUT    CONTROL_WORD;
      EX_PCPlus2     : OUT    LC3b_word;
      EX_dest        : OUT    LC3b_reg
   );
   END COMPONENT;
   COMPONENT Reg_ID_EX
   PORT (
      ID_CONTROL_IN  : IN     CONTROL_WORD;
      ID_RFAout      : IN     LC3b_word;
      ID_RFBout      : IN     LC3b_word;
      IF_ADJ11out    : IN     LC3b_word;
      IF_ADJ6out     : IN     LC3b_word;
      IF_ADJ8out     : IN     LC3b_word;
      IF_ADJ9out     : IN     LC3b_word;
      IF_IMM5out     : IN     LC3b_word;
      IF_IR11        : IN     std_logic;
      IF_IR5         : IN     std_logic;
      IF_PCPlus2     : IN     LC3b_word;
      IF_SEXT6out    : IN     LC3b_word;
      IF_dest        : IN     LC3b_reg;
      Load           : IN     std_logic;
      Reset_L        : IN     std_logic;
      clk            : IN     std_logic;
      ID_ADJ11out    : OUT    LC3b_word;
      ID_ADJ6out     : OUT    LC3b_word;
      ID_ADJ8out     : OUT    LC3b_word;
      ID_ADJ9out     : OUT    LC3b_word;
      ID_CONTROL_OUT : OUT    CONTROL_WORD;
      ID_IMM5out     : OUT    LC3b_word;
      ID_IR11        : OUT    std_logic;
      ID_IR5         : OUT    std_logic;
      ID_PCPlus2     : OUT    LC3b_word;
      ID_RFA         : OUT    LC3b_word;
      ID_RFB         : OUT    LC3b_word;
      ID_SEXT6out    : OUT    LC3b_word;
      ID_dest        : OUT    LC3b_reg
   );
   END COMPONENT;
   COMPONENT Reg_IF_ID
   PORT (
      IF_CONTROL_IN  : IN     CONTROL_WORD;
      IF_PCPlus2out  : IN     LC3b_word;
      I_DATAIN       : IN     LC3b_word;
      I_MRESP_H      : IN     std_logic;
      Load           : IN     std_logic;
      Reset_L        : IN     std_logic;
      clk            : IN     std_logic;
      IF_CONTROL_OUT : OUT    CONTROL_WORD;
      IF_IMM5        : OUT    LC3B_IMM5;
      IF_INDEX6      : OUT    LC3B_INDEX6;
      IF_IR          : OUT    LC3b_word;
      IF_IR11        : OUT    std_logic;
      IF_IR4         : OUT    std_logic;
      IF_IR5         : OUT    std_logic;
      IF_OFFSET11    : OUT    LC3B_OFFSET11;
      IF_OFFSET9     : OUT    LC3B_OFFSET9;
      IF_Opcode      : OUT    LC3b_opcode;
      IF_PCPlus2     : OUT    LC3b_word;
      IF_SrcA        : OUT    LC3b_reg;
      IF_SrcB        : OUT    LC3b_reg;
      IF_TRAPVECT8   : OUT    LC3B_TRAPVECT8;
      IF_dest        : OUT    LC3b_reg;
      IF_shftop      : OUT    LC3b_shftop
   );
   END COMPONENT;
   COMPONENT Reg_MEM_WB
   PORT (
      EX_ALU          : IN     LC3b_word;
      EX_BRAdd        : IN     LC3b_word;
      EX_PCPlus2      : IN     LC3b_word;
      EX_dest         : IN     LC3b_reg;
      Load            : IN     std_logic;
      MEM_CONTROL_IN  : IN     CONTROL_WORD;
      MEM_MDRout      : IN     LC3b_word;
      Reset_L         : IN     std_logic;
      clk             : IN     std_logic;
      MEM_ALU         : OUT    LC3b_word;
      MEM_BRAdd       : OUT    LC3b_word;
      MEM_CONTROL_OUT : OUT    CONTROL_WORD;
      MEM_MDR         : OUT    LC3b_word;
      MEM_PCPlus2     : OUT    LC3b_word;
      MEM_dest        : OUT    LC3b_reg
   );
   END COMPONENT;
   COMPONENT Splitter_EX
   PORT (
      CONTROL     : IN     CONTROL_WORD;
      ADDR1Muxsel : OUT    std_logic;
      ADDR2Muxsel : OUT    LC3B_4MUX_SEL;
      ALUMuxsel   : OUT    LC3B_4MUX_SEL;
      ALUop       : OUT    LC3B_ALUOP
   );
   END COMPONENT;
   COMPONENT Splitter_ID
   PORT (
      CONTROL     : IN     CONTROL_WORD;
      DRMuxsel    : OUT    std_logic;
      StoreMuxsel : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT Splitter_MEM
   PORT (
      CONTROL   : IN     CONTROL_WORD;
      MARMuxsel : OUT    LC3B_4MUX_SEL;
      MDRMuxsel : OUT    LC3B_4MUX_SEL;
      PCMuxsel  : OUT    LC3B_4MUX_SEL;
      Read_H    : OUT    std_logic;
      Write_H   : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT Splitter_WB
   PORT (
      CONTROL     : IN     CONTROL_WORD;
      GenCCMuxsel : OUT    std_logic;
      LoadNZP     : OUT    std_logic;
      RFMux2sel   : OUT    LC3B_4MUX_SEL;
      RFMuxsel    : OUT    LC3B_4MUX_SEL;
      RegWrite    : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT Stage_Execute
   PORT (
      ADDR1Muxsel : IN     std_logic ;
      ADDR2Muxsel : IN     LC3b_4mux_sel ;
      ALUMuxsel   : IN     LC3b_4mux_sel ;
      ALUop       : IN     LC3b_aluop ;
      EX_ADJ11    : IN     LC3b_word ;
      EX_ADJ6     : IN     LC3b_word ;
      EX_ADJ9     : IN     LC3b_word ;
      EX_IMM5     : IN     LC3b_word ;
      EX_PCPlus2  : IN     LC3b_word ;
      EX_RFAout   : IN     LC3b_word ;
      EX_RFBout   : IN     LC3b_word ;
      EX_SEXT6    : IN     LC3b_word ;
      clk         : IN     std_logic ;
      EX_ALUOUT   : OUT    LC3b_word ;
      EX_BRAddout : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT Stage_ID
   PORT (
      DRMuxsel          : IN     std_logic ;
      ID_RegFileIn      : IN     LC3b_word ;
      ID_SrcA           : IN     LC3b_reg ;
      ID_SrcB           : IN     LC3b_reg ;
      ID_dest           : IN     LC3b_reg ;
      RESET_L           : IN     std_logic ;
      StoreMuxsel       : IN     std_logic ;
      WB_WriteRegisters : IN     std_logic ;
      clk               : IN     std_logic ;
      ID_RFAout         : OUT    LC3b_word ;
      ID_RFBout         : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT Stage_IF
   PORT (
      IF_BRAddout   : IN     LC3b_word ;
      IF_MDRout     : IN     LC3b_word ;
      LoadPC        : IN     std_logic ;
      PCMuxSel      : IN     LC3b_4mux_sel ;
      RESET_L       : IN     std_logic ;
      clk           : IN     std_logic ;
      IF_PCPlus2out : OUT    LC3b_word ;
      IF_PCout      : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT Stage_Memory
   PORT (
      DATAIN        : IN     LC3b_word ;
      Load          : IN     std_logic ;
      MARMuxsel     : IN     LC3b_4mux_sel ;
      MDRMuxsel     : IN     LC3b_4mux_sel ;
      MEM_ALUout    : IN     LC3b_word ;
      MEM_PCPlus2   : IN     LC3b_word ;
      MEM_TRAPVECT8 : IN     LC3b_word ;
      MRESP_H       : IN     STD_LOGIC ;
      RESET_L       : IN     std_logic ;
      Read_H        : IN     STD_LOGIC ;
      Write_H       : IN     STD_LOGIC ;
      clk           : IN     std_logic ;
      MEM_MARout    : OUT    LC3b_word ;
      MEM_MDRout    : OUT    LC3b_word ;
      MREAD_L       : OUT    std_logic ;
      MWRITE_L      : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Stage_WB
   PORT (
      GenCCMuxsel       : IN     std_logic ;
      LoadNZP           : IN     std_logic ;
      RFMux2sel         : IN     LC3b_4mux_sel ;
      RFMuxsel          : IN     LC3b_4mux_sel ;
      RegWrite          : IN     std_logic ;
      WB_ALUout         : IN     LC3b_word ;
      WB_BRAddout       : IN     LC3b_word ;
      WB_MDRout         : IN     LC3b_word ;
      WB_PCPlus2out     : IN     LC3b_word ;
      clk               : IN     std_logic ;
      CheckN            : OUT    std_logic ;
      CheckP            : OUT    std_logic ;
      CheckZ            : OUT    std_logic ;
      WB_RFMuxout       : OUT    LC3b_word ;
      WB_WriteRegisters : OUT    std_logic ;
      n                 : OUT    std_logic ;
      p                 : OUT    std_logic ;
      z                 : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT checkBR
   PORT (
      CheckN : IN     std_logic ;
      CheckP : IN     std_logic ;
      CheckZ : IN     std_logic ;
      n      : IN     std_logic ;
      p      : IN     std_logic ;
      z      : IN     std_logic ;
      takeBr : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT delay_unit
   PORT (
      clk : IN     std_logic ;
      A2  : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT delay_unit2
   PORT (
      test : IN     STD_LOGIC ;
      Load : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT loadSig
   PORT (
      clk     : IN     std_logic ;
      preLoad : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT AND2
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT NOT1
   PORT (
      A : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : ADJ_SEXT_Unit USE ENTITY ece411.ADJ_SEXT_Unit;
   FOR ALL : AND2 USE ENTITY mp3lib.AND2;
   FOR ALL : CLKgen USE ENTITY ece411.CLKgen;
   FOR ALL : Control_ROM USE ENTITY ece411.Control_ROM;
   FOR ALL : DRAM16_DP USE ENTITY ece411.DRAM16_DP;
   FOR ALL : NOT1 USE ENTITY mp3lib.NOT1;
   FOR ALL : Reg_EX_MEM USE ENTITY ece411.Reg_EX_MEM;
   FOR ALL : Reg_ID_EX USE ENTITY ece411.Reg_ID_EX;
   FOR ALL : Reg_IF_ID USE ENTITY ece411.Reg_IF_ID;
   FOR ALL : Reg_MEM_WB USE ENTITY ece411.Reg_MEM_WB;
   FOR ALL : Splitter_EX USE ENTITY ece411.Splitter_EX;
   FOR ALL : Splitter_ID USE ENTITY ece411.Splitter_ID;
   FOR ALL : Splitter_MEM USE ENTITY ece411.Splitter_MEM;
   FOR ALL : Splitter_WB USE ENTITY ece411.Splitter_WB;
   FOR ALL : Stage_Execute USE ENTITY ece411.Stage_Execute;
   FOR ALL : Stage_ID USE ENTITY ece411.Stage_ID;
   FOR ALL : Stage_IF USE ENTITY ece411.Stage_IF;
   FOR ALL : Stage_Memory USE ENTITY ece411.Stage_Memory;
   FOR ALL : Stage_WB USE ENTITY ece411.Stage_WB;
   FOR ALL : checkBR USE ENTITY ece411.checkBR;
   FOR ALL : delay_unit USE ENTITY ece411.delay_unit;
   FOR ALL : delay_unit2 USE ENTITY ece411.delay_unit2;
   FOR ALL : loadSig USE ENTITY ece411.loadSig;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   -- DATAOUT = MDRout
   -- DATAOUT <= MEM_MDRout;


   -- Instance port mappings.
   aADJ_SEXT_Unit : ADJ_SEXT_Unit
      PORT MAP (
         IF_IMM5      => IF_IMM5,
         IF_INDEX6    => IF_INDEX6,
         IF_OFFSET11  => IF_OFFSET11,
         IF_OFFSET9   => IF_OFFSET9,
         IF_TRAPVECT8 => IF_TRAPVECT8,
         clk          => clk,
         IF_ADJ11out  => IF_ADJ11out,
         IF_ADJ6out   => IF_ADJ6out,
         IF_ADJ8out   => IF_ADJ8out,
         IF_ADJ9out   => IF_ADJ9out,
         IF_IMM5out   => IF_IMM5out,
         IF_SEXT6out  => IF_SEXT6out
      );
   U_11 : CLKgen
      PORT MAP (
         clk => clk
      );
   aControl_ROM : Control_ROM
      PORT MAP (
         clk     => clk,
         start_h => start_h,
         opcode  => IF_opcode,
         takeBr  => takeBr,
         IR4     => IF_IR4,
         IR5     => IF_IR5,
         IR11    => IF_IR11,
         CONTROL => CONTROL
      );
   aDRAM16 : DRAM16_DP
      PORT MAP (
         RESET_L     => RESET_L,
         CLK         => clk,
         I_MREAD_L   => F,
         I_ADDRESS   => I_ADDRESS,
         I_MRESP_H   => I_MRESP_H,
         I_DATAIN    => I_DATAIN,
         D_MREAD_L   => MREAD_L,
         D_MWRITEH_L => MWRITE_L,
         D_MWRITEL_L => MWRITE_L,
         D_ADDRESS   => MEM_MARout,
         D_DATAOUT   => MEM_MDRout,
         D_DATAIN    => D_DATAIN,
         D_MRESP_H   => D_MRESP_H
      );
   aReg_EX_MEM : Reg_EX_MEM
      PORT MAP (
         clk            => clk,
         Reset_L        => RESET_L,
         Load           => Load,
         EX_ALUout      => EX_ALUOUT,
         EX_BRAddout    => EX_BRAddout,
         ID_dest        => ID_dest,
         ID_ADJ8out     => ID_ADJ8out,
         ID_PCPlus2     => ID_PCPlus2,
         EX_ALU         => EX_ALU,
         EX_BRAdd       => EX_BRAdd,
         EX_dest        => EX_dest,
         EX_ADJ8out     => EX_ADJ8out,
         EX_PCPlus2     => EX_PCPlus2,
         EX_CONTROL_IN  => ID_CONTROL_OUT,
         EX_CONTROL_OUT => EX_CONTROL_OUT
      );
   aREG_ID_EX : Reg_ID_EX
      PORT MAP (
         clk            => clk,
         Reset_L        => RESET_L,
         Load           => Load,
         ID_RFAout      => ID_RFAout,
         ID_RFBout      => ID_RFBout,
         IF_dest        => IF_dest,
         IF_IR5         => IF_IR5,
         IF_IR11        => IF_IR11,
         IF_ADJ6out     => IF_ADJ6out,
         IF_ADJ8out     => IF_ADJ8out,
         IF_ADJ9out     => IF_ADJ9out,
         IF_ADJ11out    => IF_ADJ11out,
         IF_IMM5out     => IF_IMM5out,
         IF_SEXT6out    => IF_SEXT6out,
         IF_PCPlus2     => IF_PCPlus2,
         ID_RFA         => ID_RFA,
         ID_RFB         => ID_RFB,
         ID_dest        => ID_dest,
         ID_IR5         => OPEN,
         ID_IR11        => OPEN,
         ID_ADJ6out     => ID_ADJ6out,
         ID_ADJ8out     => ID_ADJ8out,
         ID_ADJ9out     => ID_ADJ9out,
         ID_ADJ11out    => ID_ADJ11out,
         ID_IMM5out     => ID_IMM5out,
         ID_SEXT6out    => ID_SEXT6out,
         ID_PCPlus2     => ID_PCPlus2,
         ID_CONTROL_IN  => IF_CONTROL_OUT,
         ID_CONTROL_OUT => ID_CONTROL_OUT
      );
   aREG_IF_ID : Reg_IF_ID
      PORT MAP (
         clk            => clk,
         Reset_L        => RESET_L,
         Load           => Load,
         I_DATAIN       => I_DATAIN,
         IF_PCPlus2out  => IF_PCPlus2out,
         I_MRESP_H      => I_MRESP_H,
         IF_IR          => IF_IR,
         IF_IMM5        => IF_IMM5,
         IF_INDEX6      => IF_INDEX6,
         IF_TRAPVECT8   => IF_TRAPVECT8,
         IF_OFFSET9     => IF_OFFSET9,
         IF_OFFSET11    => IF_OFFSET11,
         IF_Opcode      => IF_opcode,
         IF_SrcA        => IF_SrcA,
         IF_SrcB        => IF_SrcB,
         IF_dest        => IF_dest,
         IF_shftop      => OPEN,
         IF_IR4         => IF_IR4,
         IF_IR5         => IF_IR5,
         IF_IR11        => IF_IR11,
         IF_PCPlus2     => IF_PCPlus2,
         IF_CONTROL_IN  => CONTROL,
         IF_CONTROL_OUT => IF_CONTROL_OUT
      );
   aReg_MEM_WB : Reg_MEM_WB
      PORT MAP (
         clk             => clk,
         Reset_L         => RESET_L,
         Load            => Load,
         EX_ALU          => EX_ALU,
         EX_BRAdd        => EX_BRAdd,
         EX_PCPlus2      => EX_PCPlus2,
         EX_dest         => EX_dest,
         MEM_MDRout      => MEM_MDRout,
         MEM_ALU         => MEM_ALU,
         MEM_BRAdd       => MEM_BRAdd,
         MEM_PCPlus2     => MEM_PCPlus2,
         MEM_MDR         => MEM_MDR,
         MEM_dest        => MEM_dest,
         MEM_CONTROL_IN  => EX_CONTROL_OUT,
         MEM_CONTROL_OUT => MEM_CONTROL_OUT
      );
   aSplitter_EX : Splitter_EX
      PORT MAP (
         CONTROL     => ID_CONTROL_OUT,
         ADDR1Muxsel => ADDR1Muxsel1,
         ADDR2Muxsel => ADDR2Muxsel1,
         ALUMuxsel   => ALUMuxsel1,
         ALUop       => ALUop1
      );
   aSplitter_ID : Splitter_ID
      PORT MAP (
         CONTROL     => IF_CONTROL_OUT,
         DRMuxsel    => DRMuxsel1,
         StoreMuxsel => StoreMuxsel1
      );
   aSplitter_MEM : Splitter_MEM
      PORT MAP (
         CONTROL   => EX_CONTROL_OUT,
         MARMuxsel => MARMuxsel1,
         MDRMuxsel => MDRMuxsel1,
         Read_H    => Read_H,
         Write_H   => Write_H,
         PCMuxsel  => PCMuxsel1
      );
   aSplitter_WB : Splitter_WB
      PORT MAP (
         CONTROL     => MEM_CONTROL_OUT,
         GenCCMuxsel => GenCCMuxsel1,
         LoadNZP     => LoadNZP1,
         RFMux2sel   => RFMux2sel1,
         RFMuxsel    => RFMuxsel1,
         RegWrite    => RegWrite1
      );
   aStage_Execute : Stage_Execute
      PORT MAP (
         ADDR1Muxsel => ADDR1Muxsel1,
         ADDR2Muxsel => ADDR2Muxsel1,
         ALUMuxsel   => ALUMuxsel1,
         ALUop       => ALUop1,
         EX_ADJ11    => ID_ADJ11out,
         EX_ADJ6     => ID_ADJ6out,
         EX_ADJ9     => ID_ADJ9out,
         EX_IMM5     => ID_IMM5out,
         EX_PCPlus2  => ID_PCPlus2,
         EX_RFAout   => ID_RFA,
         EX_RFBout   => ID_RFB,
         EX_SEXT6    => ID_SEXT6out,
         clk         => clk,
         EX_ALUOUT   => EX_ALUOUT,
         EX_BRAddout => EX_BRAddout
      );
   aStage_ID : Stage_ID
      PORT MAP (
         DRMuxsel          => DRMuxsel1,
         ID_RegFileIn      => WB_RFMuxout,
         ID_SrcA           => IF_SrcA,
         ID_SrcB           => IF_SrcB,
         ID_dest           => MEM_dest,
         RESET_L           => RESET_L,
         StoreMuxsel       => StoreMuxsel1,
         WB_WriteRegisters => WB_WriteRegisters,
         clk               => clk,
         ID_RFAout         => ID_RFAout,
         ID_RFBout         => ID_RFBout
      );
   aStage_IF : Stage_IF
      PORT MAP (
         IF_BRAddout   => EX_BRAdd,
         IF_MDRout     => MEM_MDRout,
         LoadPC        => Load,
         PCMuxSel      => PCMuxsel1,
         RESET_L       => RESET_L,
         clk           => clk,
         IF_PCPlus2out => IF_PCPlus2out,
         IF_PCout      => I_ADDRESS
      );
   aStage_Memory : Stage_Memory
      PORT MAP (
         DATAIN        => D_DATAIN,
         Load          => Load,
         MARMuxsel     => MDRMuxsel1,
         MDRMuxsel     => MARMuxsel1,
         MEM_ALUout    => EX_ALU,
         MEM_PCPlus2   => EX_PCPlus2,
         MEM_TRAPVECT8 => EX_ADJ8out,
         MRESP_H       => D_MRESP_H,
         RESET_L       => RESET_L,
         Read_H        => Read_H,
         Write_H       => Write_H,
         clk           => clk,
         MEM_MARout    => MEM_MARout,
         MEM_MDRout    => MEM_MDRout,
         MREAD_L       => MREAD_L,
         MWRITE_L      => MWRITE_L
      );
   aStage_WB : Stage_WB
      PORT MAP (
         GenCCMuxsel       => GenCCMuxsel1,
         LoadNZP           => LoadNZP1,
         RFMux2sel         => RFMux2sel1,
         RFMuxsel          => RFMuxsel1,
         RegWrite          => RegWrite1,
         WB_ALUout         => MEM_ALU,
         WB_BRAddout       => MEM_BRAdd,
         WB_MDRout         => MEM_MDR,
         WB_PCPlus2out     => MEM_PCPlus2,
         clk               => clk,
         CheckN            => CheckN,
         CheckP            => CheckP,
         CheckZ            => CheckZ,
         WB_RFMuxout       => WB_RFMuxout,
         WB_WriteRegisters => WB_WriteRegisters,
         n                 => n,
         p                 => p,
         z                 => z
      );
   acheckBR : checkBR
      PORT MAP (
         CheckN => CheckN,
         CheckP => CheckP,
         CheckZ => CheckZ,
         n      => n,
         p      => p,
         z      => z,
         takeBr => takeBr
      );
   U_6 : delay_unit
      PORT MAP (
         clk => clk,
         A2  => A2
      );
   U_3 : delay_unit2
      PORT MAP (
         test => test,
         Load => Load
      );
   U_0 : loadSig
      PORT MAP (
         clk     => clk,
         preLoad => preLoad
      );
   U_4 : AND2
      PORT MAP (
         A => clk,
         B => B,
         F => test
      );
   U_1 : NOT1
      PORT MAP (
         A => Load,
         F => F
      );
   U_2 : NOT1
      PORT MAP (
         A => preLoad,
         F => Load2
      );
   U_5 : NOT1
      PORT MAP (
         A => A2,
         F => B
      );

END struct;
