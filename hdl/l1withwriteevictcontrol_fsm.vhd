-- VHDL Entity ece411.L1WithWriteEvictControl.interface
--
-- Created:
--          by - chao16.ews (gelib-057-18.ews.illinois.edu)
--          at - 07:50:00 12/06/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY L1WithWriteEvictControl IS
   PORT( 
      Dirty       : IN     std_logic;
      Miss        : IN     std_logic;
      PMRESP_H    : IN     std_logic;
      RESET_L     : IN     std_logic;
      clk         : IN     std_logic;
      InLoad      : OUT    std_logic;
      InWaitHit   : OUT    std_logic;
      InWriteBack : OUT    std_logic;
      PMREAD_L    : OUT    std_logic
   );

-- Declarations

END L1WithWriteEvictControl ;

--
-- VHDL Architecture ece411.L1WithWriteEvictControl.fsm
--
-- Created:
--          by - chao16.ews (gelib-057-18.ews.illinois.edu)
--          at - 07:50:00 12/06/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;
 
ARCHITECTURE fsm OF L1WithWriteEvictControl IS

   TYPE STATE_TYPE IS (
      WriteBack,
      WaitHit,
      Load
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      RESET_L
   )
   -----------------------------------------------------------------
   BEGIN
      IF (RESET_L = '0') THEN
         current_state <= WaitHit;
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      Dirty,
      Miss,
      PMRESP_H,
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN WriteBack => 
            IF (PMRESP_H = '1') THEN 
               next_state <= WaitHit;
            ELSE
               next_state <= WriteBack;
            END IF;
         WHEN WaitHit => 
            IF (Miss = '1' and Dirty='1') THEN 
               next_state <= WriteBack;
            ELSIF (Miss = '1' and Dirty='0') THEN 
               next_state <= Load;
            ELSE
               next_state <= WaitHit;
            END IF;
         WHEN Load => 
            IF (PMRESP_H = '1') THEN 
               next_state <= WaitHit;
            ELSE
               next_state <= Load;
            END IF;
         WHEN OTHERS =>
            next_state <= WaitHit;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      InLoad <= '0';
      InWaitHit <= '0';
      InWriteBack <= '0';
      PMREAD_L <= '1';

      -- Combined Actions
      CASE current_state IS
         WHEN WriteBack => 
            InWriteBack <= '1';
            PMREAD_L <= '0' after 6ns;
         WHEN WaitHit => 
            InWaitHit <= '1';
         WHEN Load => 
            InLoad <= '1';
            PMREAD_L <= '0' after 6ns;
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;
