-- VHDL Entity ece411.Stage_Memory.symbol
--
-- Created:
--          by - li151.ews (gelib-057-06.ews.illinois.edu)
--          at - 13:46:35 12/06/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;
USE ieee.std_logic_arith.all;

ENTITY Stage_Memory IS
   PORT( 
      DATAIN         : IN     LC3b_word;
      EX_RFB         : IN     LC3b_word;
      LDI            : IN     std_logic;
      Load           : IN     std_logic;
      MARMuxsel      : IN     LC3b_4mux_sel;
      MDRMuxsel      : IN     LC3b_4mux_sel;
      MEM_ALUout     : IN     LC3b_word;
      MEM_PCPlus2    : IN     LC3b_word;
      MEM_TRAPVECT8  : IN     LC3b_word;
      MRESP_H        : IN     STD_LOGIC;
      RESET_L        : IN     std_logic;
      Read_H         : IN     STD_LOGIC;
      STB            : IN     STD_LOGIC;
      STI            : IN     std_logic;
      Write_H        : IN     STD_LOGIC;
      clk            : IN     std_logic;
      MEM_ByteMuxsel : OUT    std_logic;
      MEM_MARout     : OUT    LC3b_word;
      MEM_MDRout     : OUT    LC3b_word;
      MEM_READY_H    : OUT    std_logic;
      MREAD_L        : OUT    std_logic;
      MWRITEH_L      : OUT    std_logic;
      MWRITEL_L      : OUT    std_logic
   );

-- Declarations

END Stage_Memory ;

--
-- VHDL Architecture ece411.Stage_Memory.struct
--
-- Created:
--          by - li151.ews (gelib-057-06.ews.illinois.edu)
--          at - 13:46:36 12/06/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY mp3lib;

ARCHITECTURE struct OF Stage_Memory IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL C                : LC3b_word;
   SIGNAL C1               : LC3b_word;
   SIGNAL F                : STD_LOGIC;
   SIGNAL F1               : STD_LOGIC;
   SIGNAL F10              : STD_LOGIC;
   SIGNAL F11              : STD_LOGIC;
   SIGNAL F12              : STD_LOGIC;
   SIGNAL F13              : STD_LOGIC;
   SIGNAL F14              : STD_LOGIC;
   SIGNAL F15              : STD_LOGIC;
   SIGNAL F16              : STD_LOGIC;
   SIGNAL F17              : STD_LOGIC;
   SIGNAL F18              : STD_LOGIC;
   SIGNAL F19              : STD_LOGIC;
   SIGNAL F2               : STD_LOGIC;
   SIGNAL F20              : STD_LOGIC;
   SIGNAL F21              : STD_LOGIC;
   SIGNAL F22              : LC3B_WORD;
   SIGNAL F23              : STD_LOGIC;
   SIGNAL F24              : STD_LOGIC;
   SIGNAL F25              : STD_LOGIC;
   SIGNAL F26              : STD_LOGIC;
   SIGNAL F27              : STD_LOGIC;
   SIGNAL F28              : STD_LOGIC;
   SIGNAL F29              : STD_LOGIC;
   SIGNAL F3               : STD_LOGIC;
   SIGNAL F30              : STD_LOGIC;
   SIGNAL F31              : STD_LOGIC;
   SIGNAL F32              : STD_LOGIC;
   SIGNAL F4               : LC3B_WORD;
   SIGNAL F5               : STD_LOGIC;
   SIGNAL F6               : STD_LOGIC;
   SIGNAL F7               : STD_LOGIC;
   SIGNAL F8               : STD_LOGIC;
   SIGNAL F9               : STD_LOGIC;
   SIGNAL INDIRECT_ADDRESS : LC3b_word;
   SIGNAL INDIRECT_STATE   : std_logic;
   SIGNAL SelHByteout      : LC3b_word;
   SIGNAL SelLByteout      : LC3b_word;

   -- Implicit buffer signal declarations
   SIGNAL MEM_ByteMuxsel_internal : std_logic;
   SIGNAL MEM_MARout_internal     : LC3b_word;


   -- Component Declarations
   COMPONENT ADDR0
   PORT (
      ADDRESS   : IN     LC3b_word;
      clk       : IN     std_logic;
      ADDRESS_0 : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT AND4
   PORT (
      A : IN     std_logic;
      B : IN     std_logic;
      C : IN     std_logic;
      D : IN     std_logic;
      F : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT SelHByte
   PORT (
      A           : IN     LC3b_word;
      SelHByteout : OUT    LC3b_word
   );
   END COMPONENT;
   COMPONENT SelLByte
   PORT (
      A           : IN     LC3b_word;
      SelLByteout : OUT    LC3b_word
   );
   END COMPONENT;
   COMPONENT WordMux4
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      C   : IN     LC3b_word ;
      D   : IN     LC3b_word ;
      Sel : IN     LC3b_4mux_sel ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT AND2
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT AND3
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      C : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT MUX2_16
   PORT (
      A   : IN     LC3B_WORD ;
      B   : IN     LC3B_WORD ;
      SEL : IN     STD_LOGIC ;
      F   : OUT    LC3B_WORD 
   );
   END COMPONENT;
   COMPONENT NOT1
   PORT (
      A : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT OR2
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT OR3
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      C : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT REG1
   PORT (
      RESET_L : IN     STD_LOGIC ;
      A       : IN     STD_LOGIC ;
      EN      : IN     STD_LOGIC ;
      CLK     : IN     STD_LOGIC ;
      F       : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT REG16
   PORT (
      RESET_L : IN     STD_LOGIC ;
      A       : IN     STD_LOGIC_VECTOR (15 DOWNTO 0);
      EN      : IN     STD_LOGIC ;
      CLK     : IN     STD_LOGIC ;
      F       : OUT    STD_LOGIC_VECTOR (15 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : ADDR0 USE ENTITY ece411.ADDR0;
   FOR ALL : AND2 USE ENTITY mp3lib.AND2;
   FOR ALL : AND3 USE ENTITY mp3lib.AND3;
   FOR ALL : AND4 USE ENTITY ece411.AND4;
   FOR ALL : MUX2_16 USE ENTITY mp3lib.MUX2_16;
   FOR ALL : NOT1 USE ENTITY mp3lib.NOT1;
   FOR ALL : OR2 USE ENTITY mp3lib.OR2;
   FOR ALL : OR3 USE ENTITY mp3lib.OR3;
   FOR ALL : REG1 USE ENTITY mp3lib.REG1;
   FOR ALL : REG16 USE ENTITY mp3lib.REG16;
   FOR ALL : SelHByte USE ENTITY ece411.SelHByte;
   FOR ALL : SelLByte USE ENTITY ece411.SelLByte;
   FOR ALL : WordMux4 USE ENTITY ece411.WordMux4;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   U_11 : ADDR0
      PORT MAP (
         ADDRESS   => MEM_MARout_internal,
         clk       => clk,
         ADDRESS_0 => MEM_ByteMuxsel_internal
      );
   U_7 : AND4
      PORT MAP (
         A => Write_H,
         B => F17,
         C => F18,
         D => F23,
         F => F20
      );
   U_37 : AND4
      PORT MAP (
         A => Write_H,
         B => F28,
         C => F29,
         D => F27,
         F => F31
      );
   aSelHByte : SelHByte
      PORT MAP (
         A           => EX_RFB,
         SelHByteout => SelHByteout
      );
   aSelLByte : SelLByte
      PORT MAP (
         A           => EX_RFB,
         SelLByteout => SelLByteout
      );
   MARMux : WordMux4
      PORT MAP (
         A   => MEM_PCPlus2,
         B   => F4,
         C   => C,
         D   => MEM_TRAPVECT8,
         Sel => MARMuxsel,
         F   => MEM_MARout_internal
      );
   MDRMux : WordMux4
      PORT MAP (
         A   => DATAIN,
         B   => F22,
         C   => C1,
         D   => EX_RFB,
         Sel => MDRMuxsel,
         F   => MEM_MDRout
      );
   U_4 : AND2
      PORT MAP (
         A => MRESP_H,
         B => F1,
         F => F2
      );
   U_15 : AND2
      PORT MAP (
         A => INDIRECT_STATE,
         B => F6,
         F => F9
      );
   U_17 : AND2
      PORT MAP (
         A => STI,
         B => F11,
         F => F14
      );
   U_28 : AND2
      PORT MAP (
         A => STI,
         B => INDIRECT_STATE,
         F => F19
      );
   U_29 : AND2
      PORT MAP (
         A => STB,
         B => MEM_ByteMuxsel_internal,
         F => F25
      );
   U_35 : AND2
      PORT MAP (
         A => STI,
         B => INDIRECT_STATE,
         F => F30
      );
   U_36 : AND2
      PORT MAP (
         A => STB,
         B => F24,
         F => F26
      );
   U_6 : AND3
      PORT MAP (
         A => MRESP_H,
         B => INDIRECT_STATE,
         C => F7,
         F => F10
      );
   U_10 : AND3
      PORT MAP (
         A => F3,
         B => F5,
         C => MRESP_H,
         F => F8
      );
   U_22 : AND3
      PORT MAP (
         A => Read_H,
         B => F15,
         C => F13,
         F => F16
      );
   ByteMux : MUX2_16
      PORT MAP (
         A   => SelLByteout,
         B   => SelHByteout,
         SEL => MEM_ByteMuxsel_internal,
         F   => F22
      );
   U_12 : MUX2_16
      PORT MAP (
         A   => MEM_ALUout,
         B   => INDIRECT_ADDRESS,
         SEL => F9,
         F   => F4
      );
   U_1 : NOT1
      PORT MAP (
         A => INDIRECT_STATE,
         F => F
      );
   U_8 : NOT1
      PORT MAP (
         A => LDI,
         F => F3
      );
   U_9 : NOT1
      PORT MAP (
         A => STI,
         F => F5
      );
   U_13 : NOT1
      PORT MAP (
         A => F12,
         F => MREAD_L
      );
   U_19 : NOT1
      PORT MAP (
         A => LDI,
         F => F15
      );
   U_20 : NOT1
      PORT MAP (
         A => INDIRECT_STATE,
         F => F11
      );
   U_21 : NOT1
      PORT MAP (
         A => STI,
         F => F13
      );
   U_23 : NOT1
      PORT MAP (
         A => STB,
         F => F23
      );
   U_24 : NOT1
      PORT MAP (
         A => STI,
         F => F18
      );
   U_25 : NOT1
      PORT MAP (
         A => LDI,
         F => F17
      );
   U_26 : NOT1
      PORT MAP (
         A => F21,
         F => MWRITEH_L
      );
   U_27 : NOT1
      PORT MAP (
         A => STB,
         F => F27
      );
   U_30 : NOT1
      PORT MAP (
         A => MEM_ByteMuxsel_internal,
         F => F24
      );
   U_32 : NOT1
      PORT MAP (
         A => STI,
         F => F29
      );
   U_33 : NOT1
      PORT MAP (
         A => LDI,
         F => F28
      );
   U_39 : NOT1
      PORT MAP (
         A => F32,
         F => MWRITEL_L
      );
   U_2 : OR2
      PORT MAP (
         A => LDI,
         B => STI,
         F => F1
      );
   U_3 : OR2
      PORT MAP (
         A => LDI,
         B => STI,
         F => F7
      );
   U_14 : OR2
      PORT MAP (
         A => LDI,
         B => STI,
         F => F6
      );
   U_16 : OR2
      PORT MAP (
         A => F8,
         B => F10,
         F => MEM_READY_H
      );
   U_18 : OR3
      PORT MAP (
         A => LDI,
         B => F14,
         C => F16,
         F => F12
      );
   U_31 : OR3
      PORT MAP (
         A => F20,
         B => F19,
         C => F25,
         F => F21
      );
   U_38 : OR3
      PORT MAP (
         A => F31,
         B => F30,
         C => F26,
         F => F32
      );
   U_5 : REG1
      PORT MAP (
         RESET_L => RESET_L,
         A       => F,
         EN      => F2,
         CLK     => clk,
         F       => INDIRECT_STATE
      );
   U_0 : REG16
      PORT MAP (
         RESET_L => RESET_L,
         A       => DATAIN,
         EN      => F2,
         CLK     => clk,
         F       => INDIRECT_ADDRESS
      );

   -- Implicit buffered output assignments
   MEM_ByteMuxsel <= MEM_ByteMuxsel_internal;
   MEM_MARout     <= MEM_MARout_internal;

END struct;
